#!/usr/bin/env python3
import os
from typing import Optional

EON = os.path.isfile('/EON')

RESERVED_PORTS = [8022, 22]  # sshd
STARTING_PORT = 8001


cur_port = STARTING_PORT
def new_port():
  global cur_port
  cur_port += 1
  while cur_port - 1 in RESERVED_PORTS:
    cur_port += 1
  return cur_port - 1


class Service:
  def __init__(self, should_log: bool, frequency: float, decimation: Optional[int] = None):
    self.port = new_port()
    self.should_log = should_log
    self.frequency = frequency
    self.decimation = decimation


service_list = {
  "roadCameraState": Service(True, 20., 1),
  "sensorEvents": Service(True, 100., 100),
  "gpsNMEA": Service(True, 9.),
  "deviceState": Service(True, 2., 1),
  "can": Service(True, 100.),
  "controlsState": Service(True, 100., 100),
  "features": Service(True, 0.),
  "pandaState": Service(True, 2., 1),
  "radarState": Service(True, 20., 5),
  "roadEncodeIdx": Service(True, 20., 1),
  "liveTracks": Service(True, 20.),
  "sendcan": Service(True, 100.),
  "logMessage": Service(True, 0.),
  "liveCalibration": Service(True, 4., 4),
  "androidLog": Service(True, 0., 1),
  "carState": Service(True, 100., 10),
  "carControl": Service(True, 100., 10),
  "longitudinalPlan": Service(True, 20., 2),
  "liveLocation": Service(True, 0., 1),
  "procLog": Service(True, 0.5),
  "gpsLocationExternal": Service(True, 10., 1),
  "ubloxGnss": Service(True, 10.),
  "clocks": Service(True, 1., 1),
  "liveMpc": Service(False, 20.),
  "liveLongitudinalMpc": Service(False, 20.),
  "ubloxRaw": Service(True, 20.),
  "liveLocationKalman": Service(True, 20., 2),
  "uiLayoutState": Service(True, 0.),
  "liveParameters": Service(True, 20., 2),
  "cameraOdometry": Service(True, 20., 5),
  "lateralPlan": Service(True, 20., 2),
  "thumbnail": Service(True, 0.2, 1),
  "carEvents": Service(True, 1., 1),
  "carParams": Service(True, 0.02, 1),
  "driverCameraState": Service(True, 10. if EON else 20., 1),
  "driverEncodeIdx": Service(True, 10. if EON else 20., 1),
  "driverState": Service(True, 10. if EON else 20., 1),
  "driverMonitoringState": Service(True, 10. if EON else 20., 1),
  "offroadLayout": Service(False, 0.),
  "wideRoadEncodeIdx": Service(True, 20., 1),
  "wideRoadCameraState": Service(True, 20., 1),
  "modelV2": Service(True, 20., 20),
  "managerState": Service(True, 2., 1),

  "testModel": Service(False, 0.),
  "testLiveLocation": Service(False, 0.),
  "testJoystick": Service(False, 0.),
}


def build_header():
  h = ""
  h += "/* THIS IS AN AUTOGENERATED FILE, PLEASE EDIT services.py */\n"
  h += "#ifndef __SERVICES_H\n"
  h += "#define __SERVICES_H\n"
  h += "struct service { char name[0x100]; int port; bool should_log; int frequency; int decimation; };\n"
  h += "static struct service services[] = {\n"
  for k, v in service_list.items():
    should_log = "true" if v.should_log else "false"
    decimation = -1 if v.decimation is None else v.decimation
    h += '  { .name = "%s", .port = %d, .should_log = %s, .frequency = %d, .decimation = %d },\n' % \
         (k, v.port, should_log, v.frequency, decimation)
  h += "};\n"
  h += "#endif\n"
  return h


if __name__ == "__main__":
  print(build_header())
