# ruff: noqa: A003, F821, E501
"""This is an automatically generated stub for `maptile.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Literal, Sequence, overload

class Point:
    x: float
    y: float
    z: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PointReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PointReader: ...
    @staticmethod
    def new_message() -> PointBuilder: ...
    def to_dict(self) -> dict: ...

class PointReader(Point):
    def as_builder(self) -> PointBuilder: ...

class PointBuilder(Point):
    @staticmethod
    def from_dict(dictionary: dict) -> PointBuilder: ...
    def copy(self) -> PointBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PointReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PolyLine:
    points: Sequence[Point | PointBuilder | PointReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PolyLineReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PolyLineReader: ...
    @staticmethod
    def new_message() -> PolyLineBuilder: ...
    def to_dict(self) -> dict: ...

class PolyLineReader(PolyLine):
    points: Sequence[PointReader]
    def as_builder(self) -> PolyLineBuilder: ...

class PolyLineBuilder(PolyLine):
    points: Sequence[Point | PointBuilder | PointReader]
    @staticmethod
    def from_dict(dictionary: dict) -> PolyLineBuilder: ...
    def copy(self) -> PolyLineBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PolyLineReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Lane:
    class LaneBoundary:
        polyLine: PolyLine | PolyLineBuilder | PolyLineReader
        startHeading: float
        def init(self, name: Literal["polyLine"]) -> PolyLine: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Lane.LaneBoundaryReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Lane.LaneBoundaryReader: ...
        @staticmethod
        def new_message() -> Lane.LaneBoundaryBuilder: ...
        def to_dict(self) -> dict: ...

    class LaneBoundaryReader(Lane.LaneBoundary):
        polyLine: PolyLineReader
        def as_builder(self) -> Lane.LaneBoundaryBuilder: ...

    class LaneBoundaryBuilder(Lane.LaneBoundary):
        polyLine: PolyLine | PolyLineBuilder | PolyLineReader
        @staticmethod
        def from_dict(dictionary: dict) -> Lane.LaneBoundaryBuilder: ...
        def copy(self) -> Lane.LaneBoundaryBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Lane.LaneBoundaryReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    id: str
    leftBoundary: Lane.LaneBoundary | Lane.LaneBoundaryBuilder | Lane.LaneBoundaryReader
    rightBoundary: Lane.LaneBoundary | Lane.LaneBoundaryBuilder | Lane.LaneBoundaryReader
    leftAdjacentId: str
    rightAdjacentId: str
    inboundIds: Sequence[str]
    outboundIds: Sequence[str]
    @overload
    def init(self, name: Literal["leftBoundary"]) -> Lane.LaneBoundary: ...
    @overload
    def init(self, name: Literal["rightBoundary"]) -> Lane.LaneBoundary: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LaneReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LaneReader: ...
    @staticmethod
    def new_message() -> LaneBuilder: ...
    def to_dict(self) -> dict: ...

class LaneReader(Lane):
    leftBoundary: Lane.LaneBoundaryReader
    rightBoundary: Lane.LaneBoundaryReader
    def as_builder(self) -> LaneBuilder: ...

class LaneBuilder(Lane):
    leftBoundary: Lane.LaneBoundary | Lane.LaneBoundaryBuilder | Lane.LaneBoundaryReader
    rightBoundary: Lane.LaneBoundary | Lane.LaneBoundaryBuilder | Lane.LaneBoundaryReader
    @staticmethod
    def from_dict(dictionary: dict) -> LaneBuilder: ...
    def copy(self) -> LaneBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LaneReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TileSummary:
    version: str
    updatedAt: int
    level: int
    x: int
    y: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[TileSummaryReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> TileSummaryReader: ...
    @staticmethod
    def new_message() -> TileSummaryBuilder: ...
    def to_dict(self) -> dict: ...

class TileSummaryReader(TileSummary):
    def as_builder(self) -> TileSummaryBuilder: ...

class TileSummaryBuilder(TileSummary):
    @staticmethod
    def from_dict(dictionary: dict) -> TileSummaryBuilder: ...
    def copy(self) -> TileSummaryBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TileSummaryReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class MapTile:
    summary: TileSummary | TileSummaryBuilder | TileSummaryReader
    lanes: Sequence[Lane | LaneBuilder | LaneReader]
    def init(self, name: Literal["summary"]) -> TileSummary: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[MapTileReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> MapTileReader: ...
    @staticmethod
    def new_message() -> MapTileBuilder: ...
    def to_dict(self) -> dict: ...

class MapTileReader(MapTile):
    summary: TileSummaryReader
    lanes: Sequence[LaneReader]
    def as_builder(self) -> MapTileBuilder: ...

class MapTileBuilder(MapTile):
    summary: TileSummary | TileSummaryBuilder | TileSummaryReader
    lanes: Sequence[Lane | LaneBuilder | LaneReader]
    @staticmethod
    def from_dict(dictionary: dict) -> MapTileBuilder: ...
    def copy(self) -> MapTileBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> MapTileReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
