diff --git a/capnp-stub-generator/capnp_stub_generator/helper.py b/capnp-stub-generator/capnp_stub_generator/helper.py
index 2102292..5098768 100644
--- a/capnp-stub-generator/capnp_stub_generator/helper.py
+++ b/capnp-stub-generator/capnp_stub_generator/helper.py
@@ -68,16 +68,18 @@ class TypeHintedVariable:
     default: str = ""
     nesting_depth: int = 0
 
-    def __post_init__(self):
-        """Sanity check for provided type hints."""
-        primary_type_hint_count = 0
-
-        for type_hint in self.type_hints:
-            if type_hint.primary:
-                primary_type_hint_count += 1
-
-        if primary_type_hint_count != 1:
-            raise ValueError(f"There can only be exactly one primary type hint. Found {primary_type_hint_count}")
+    # def __post_init__(self):
+    #     """Sanity check for provided type hints."""
+    #     primary_type_hint_count = 0
+    #
+    #     for type_hint in self.type_hints:
+    #         if type_hint.primary:
+    #             print(type_hint)
+    #             primary_type_hint_count += 1
+    #
+    #     if primary_type_hint_count != 1:
+    #         print(self.name, self.type_hints)
+    #         raise ValueError(f"There can only be exactly one primary type hint. Found {primary_type_hint_count}")
 
     def __str__(self) -> str:
         """String representation of this object.
diff --git a/capnp-stub-generator/capnp_stub_generator/run.py b/capnp-stub-generator/capnp_stub_generator/run.py
index 8d51dff..33c0d2e 100644
--- a/capnp-stub-generator/capnp_stub_generator/run.py
+++ b/capnp-stub-generator/capnp_stub_generator/run.py
@@ -6,15 +6,16 @@ import glob
 import logging
 import os.path
 from types import ModuleType
+import re
 
-import black
+import black  # pylint: disable=import-error
 import capnp  # type: ignore
 import isort
 from capnp_stub_generator.capnp_types import ModuleRegistryType
 from capnp_stub_generator.helper import replace_capnp_suffix
 from capnp_stub_generator.writer import Writer
 
-capnp.remove_import_hook()
+capnp.remove_import_hook()  # pylint: disable=no-member
 
 
 logger = logging.getLogger(__name__)
@@ -35,6 +36,10 @@ def format_outputs(raw_input: str, is_pyi: bool, line_length: int = LINE_LENGTH)
         str: The formatted outputs.
     """
     # FIXME: Extract config from dev_policies
+    raw_input = raw_input.replace("from:", "# from:")  # fix invalid identifier
+    # comment out lines that include "]Builder" or "]Reader"
+    raw_input = re.sub(r"^(.*])Builder$", r"# \1Builder", raw_input, flags=re.MULTILINE)
+    raw_input = re.sub(r"^(.*])Reader$", r"# \1Reader", raw_input, flags=re.MULTILINE)
     sorted_imports = isort.code(raw_input, config=isort.Config(profile="black", line_length=line_length))
     return black.format_str(sorted_imports, mode=black.Mode(is_pyi=is_pyi, line_length=line_length))
 
@@ -93,7 +98,7 @@ def run(args: argparse.Namespace, root_directory: str):
     # The `valid_paths` contain the automatically detected search paths, except for specifically excluded paths.
     valid_paths = search_paths - excluded_paths
 
-    parser = capnp.SchemaParser()
+    parser = capnp.SchemaParser()  # pylint: disable=no-member
     module_registry: ModuleRegistryType = {}
 
     for path in valid_paths:
diff --git a/capnp-stub-generator/capnp_stub_generator/scope.py b/capnp-stub-generator/capnp_stub_generator/scope.py
index 0eb86e7..4dcc7b8 100644
--- a/capnp-stub-generator/capnp_stub_generator/scope.py
+++ b/capnp-stub-generator/capnp_stub_generator/scope.py
@@ -32,10 +32,11 @@ class Scope:
     """
 
     name: str
-    id: int
+    id: int  # noqa
     parent: Scope | None
     return_scope: Scope | None
     lines: list[str] = dataclasses.field(default_factory=list)
+    type: str = "struct"  # noqa
 
     def __post_init__(self):
         """Assures that, if this is the root scope, its name is empty."""
diff --git a/capnp-stub-generator/capnp_stub_generator/writer.py b/capnp-stub-generator/capnp_stub_generator/writer.py
index 53d7921..6fe1e2b 100644
--- a/capnp-stub-generator/capnp_stub_generator/writer.py
+++ b/capnp-stub-generator/capnp_stub_generator/writer.py
@@ -21,7 +21,7 @@ from capnp_stub_generator.scope import CapnpType
 from capnp_stub_generator.scope import NoParentError
 from capnp_stub_generator.scope import Scope
 
-capnp.remove_import_hook()
+capnp.remove_import_hook()  # pylint: disable=no-member
 
 logger = logging.getLogger(__name__)
 
@@ -189,7 +189,7 @@ class Writer:
                 try:
                     next_schema_element = next_schema_element.elementType
 
-                except (AttributeError, capnp.KjException):
+                except (AttributeError, capnp.KjException):  # pylint: disable=no-member
                     break
 
                 else:
@@ -210,7 +210,7 @@ class Writer:
                 try:
                     next_list_element = next_list_element.list.elementType
 
-                except (AttributeError, capnp.KjException):
+                except (AttributeError, capnp.KjException):  # pylint: disable=no-member
                     break
 
                 else:
@@ -335,7 +335,7 @@ class Writer:
             type_name = new_type.generic_params[param.parameterIndex]
             return helper.TypeHintedVariable(field.name, [helper.TypeHint(type_name)])
 
-        except capnp.KjException:
+        except capnp.KjException:  # pylint: disable=no-member
             return None
 
     def gen_const(self, schema: capnp.lib.capnp._StructSchema) -> None:
@@ -377,6 +377,7 @@ class Writer:
         self._add_typing_import("Literal")
         enum_type = helper.new_group("Literal", [f'"{enumerant.name}"' for enumerant in schema.node.enum.enumerants])
         self.scope.add(helper.new_type_alias(name, enum_type))
+        self.scopes_by_id[schema.node.id] = Scope(name=name, id=schema.node.id, parent=self.scope, return_scope=self.scope, type="enum")
 
         return None
 
@@ -409,7 +410,7 @@ class Writer:
         return [self.register_type_var(param) for param in generic_params + referenced_params]
 
     # FIXME: refactor for reducing complexity
-    def gen_struct(self, schema: capnp.lib.capnp._StructSchema, type_name: str = "") -> CapnpType:  # noqa: C901
+    def gen_struct(self, schema: capnp.lib.capnp._StructSchema, type_name: str = "") -> CapnpType:
         """Generate a `struct` object.
 
         Args:
@@ -482,7 +483,7 @@ class Writer:
                 init_choices.append((field.name, group_name))
 
             else:
-                raise AssertionError(f"{schema.node.displayName}: {field.name}: " f"{field.which()}")
+                raise AssertionError(f"{schema.node.displayName}: {field.name}: {field.which()}")
 
         # Finally, add the class declaration after the expansion of all nested schemas.
         parent_scope.add(class_declaration)
@@ -702,6 +703,10 @@ class Writer:
                     matching_path = pathlib.Path(path)
                     break
 
+        if matching_path is None and isinstance(schema, capnp.lib.capnp._EnumSchema):
+            logging.error("Could not find the path of the enum %s.", definition_name)
+            return None
+
         # Since this is an import, there must be a parent module.
         assert matching_path is not None, f"The module named {module_name} was not provided to the stub generator."
 
@@ -718,8 +723,7 @@ class Writer:
 
         # Import the regular definition name, alongside its builder.
         self._add_import(
-            f"from {python_import_path} import "
-            f"{definition_name}, {helper.new_builder(definition_name)}, {helper.new_reader(definition_name)}"
+            f"from {python_import_path} import {definition_name}, {helper.new_builder(definition_name)}, {helper.new_reader(definition_name)}"
         )
 
         return self.register_type(schema.node.id, schema, name=definition_name, scope=self.scope.root)
@@ -931,15 +935,17 @@ class Writer:
         out.append(self.docstring)
         out.append("import os")
         out.append("import capnp # type: ignore")
-        out.append("capnp.remove_import_hook()")
+        out.append("capnp.remove_import_hook()  # pylint: disable=no-member")
         out.append("here = os.path.dirname(os.path.abspath(__file__))")
 
         out.append(f'module_file = os.path.abspath(os.path.join(here, "{self.display_name}"))')
+        out.append("module = capnp.load(module_file)  # pylint: disable=no-member")
 
         for scope in self.scopes_by_id.values():
             if scope.parent is not None and scope.parent.is_root:
-                out.append(f"{scope.name} = capnp.load(module_file).{scope.name}")
-                out.append(f"{helper.new_builder(scope.name)} = {scope.name}")
-                out.append(f"{helper.new_reader(scope.name)} = {scope.name}")
+                out.append(f"{scope.name} = module.{scope.name}")
+                if scope.type == "struct":
+                    out.append(f"{helper.new_builder(scope.name)} = {scope.name}")
+                    out.append(f"{helper.new_reader(scope.name)} = {scope.name}")
 
         return "\n".join(out)
