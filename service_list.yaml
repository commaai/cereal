# TODO: these port numbers are hardcoded in c, fix this














service_list = {}
with open(service_list_path, "r") as f:
  for k, v in yaml.safe_load(f).items():
    decimation = None
    if len(v) == 4:
      decimation = v[3]

    service_list[k] = Service(v[0], v[1], v[2], decimation)






# LogRotate: 8001 is a PUSH PULL socket between loggerd and visiond

# all ZMQ pub sub: port, should_log, frequency, (qlog_decimation)

# 8080 is reserved for slave testing daemon
# 8762 is reserved for logserver

# manager -- base process to manage starting and stopping of all others
#   subscribes: thermal

# **** processes that communicate with the outside world ****

# thermald -- decides when to start and stop onroad
#   subscribes: health, location
#   publishes: thermal

# boardd -- communicates with the car
#   subscribes: sendcan
#   publishes: can, health, ubloxRaw

# sensord -- publishes IMU and Magnetometer
#   publishes: sensorEvents

# gpsd -- publishes EON's gps
#   publishes: gpsNMEA

# camerad -- publishes camera frames
#   publishes: frame, frontFrame, thumbnail
#   subscribes: driverState

# dmonitoringmodeld -- runs face detection on camera frames
#   publishes: driverState

# **** stateful data transformers ****

# modeld -- runs & publishes the model
#   publishes: model, cameraOdometry
#   subscribes: liveCalibration, pathPlan

# plannerd -- decides where to drive the car
#   subscribes: carState, model, radarState, controlsState, liveParameters
#   publishes:  longitudinalplan, lateralPlan, liveMpc, liveLongitudinalMpc

# controlsd -- drives the car by sending CAN messages to panda
#   subscribes: can, thermal, health, plan, pathPlan, driverMonitoringState, liveCalibration, model
#   publishes:  carState, carControl, sendcan, controlsState, carEvents, carParams

# dmonitoringd -- processes driver monitoring data and publishes driver awareness
#   subscribes: driverState, liveCalibration, carState, model, gpsLocation
#   publishes: driverMonitoringState

# radard -- processes the radar and vision data
#   subscribes: can, controlsState, model, liveParameters
#   publishes:  radarState, liveTracks

# params_learner -- learns vehicle params by observing the vehicle dynamics
#   subscribes: controlsState, sensorEvents, cameraOdometry
#   publishes: liveParameters

# calibrationd -- reads posenet and applies a temporal filter on the frame region to look at
#   subscribes: cameraOdometry
#   publishes: liveCalibration

# ubloxd -- read raw ublox data and converts them in readable format
#   subscribes: ubloxRaw
#   publishes: ubloxGnss

# **** LOGGING SERVICE ****

# loggerd
#   subscribes: EVERYTHING

# **** NON VITAL SERVICES ****

# ui
#   subscribes: thermal, model, controlsState, uiLayout, liveCalibration, radarState, liveMpc, plusFrame, liveMapData

# uploader
#   communicates through file system with loggerd

# deleter
#   communicates through file system with loggerd and uploader

# logmessaged -- central logging service, can log to cloud
#   publishes:  logMessage

# logcatd -- fetches logcat info from android
#   publishes:  androidLog

# proclogd -- fetches process information
#   publishes: procLog

# tombstoned -- reports native crashes

# athenad -- on request, open a sub socket and return the value

# updated -- waits for network access and tries to update every hour
