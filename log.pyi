# ruff: noqa: A003, F821, E501
"""This is an automatically generated stub for `log.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Generic, Iterator, Literal, Sequence, TypeVar, overload

from .car_capnp import (
    CarControl,
    CarControlBuilder,
    CarControlReader,
    CarEvent,
    CarEventBuilder,
    CarEventReader,
    CarParams,
    CarParamsBuilder,
    CarParamsReader,
    CarState,
    CarStateBuilder,
    CarStateReader,
)
from .custom_capnp import (
    CustomReserved0,
    CustomReserved0Builder,
    CustomReserved0Reader,
    CustomReserved1,
    CustomReserved1Builder,
    CustomReserved1Reader,
    CustomReserved2,
    CustomReserved2Builder,
    CustomReserved2Reader,
    CustomReserved3,
    CustomReserved3Builder,
    CustomReserved3Reader,
    CustomReserved4,
    CustomReserved4Builder,
    CustomReserved4Reader,
    CustomReserved5,
    CustomReserved5Builder,
    CustomReserved5Reader,
    CustomReserved6,
    CustomReserved6Builder,
    CustomReserved6Reader,
    CustomReserved7,
    CustomReserved7Builder,
    CustomReserved7Reader,
    CustomReserved8,
    CustomReserved8Builder,
    CustomReserved8Reader,
    CustomReserved9,
    CustomReserved9Builder,
    CustomReserved9Reader,
)
from .legacy_capnp import (
    AndroidGnss,
    AndroidGnssBuilder,
    AndroidGnssReader,
    CalibrationFeatures,
    CalibrationFeaturesBuilder,
    CalibrationFeaturesReader,
    CellInfo,
    CellInfoBuilder,
    CellInfoReader,
    EthernetPacket,
    EthernetPacketBuilder,
    EthernetPacketReader,
    GPSPlannerPlan,
    GPSPlannerPlanBuilder,
    GPSPlannerPlanReader,
    GPSPlannerPoints,
    GPSPlannerPointsBuilder,
    GPSPlannerPointsReader,
    KalmanOdometry,
    KalmanOdometryBuilder,
    KalmanOdometryReader,
    LidarPts,
    LidarPtsBuilder,
    LidarPtsReader,
    LiveEventData,
    LiveEventDataBuilder,
    LiveEventDataReader,
    LiveLocationData,
    LiveLocationDataBuilder,
    LiveLocationDataReader,
    LiveUI,
    LiveUIBuilder,
    LiveUIReader,
    ModelData,
    ModelDataBuilder,
    ModelDataReader,
    NavStatus,
    NavStatusBuilder,
    NavStatusReader,
    NavUpdate,
    NavUpdateBuilder,
    NavUpdateReader,
    OrbFeatures,
    OrbFeaturesBuilder,
    OrbFeaturesReader,
    OrbFeaturesSummary,
    OrbFeaturesSummaryBuilder,
    OrbFeaturesSummaryReader,
    OrbKeyFrame,
    OrbKeyFrameBuilder,
    OrbKeyFrameReader,
    OrbObservation,
    OrbObservationBuilder,
    OrbObservationReader,
    OrbOdometry,
    OrbOdometryBuilder,
    OrbOdometryReader,
    OrbslamCorrection,
    OrbslamCorrectionBuilder,
    OrbslamCorrectionReader,
    TrafficEvent,
    TrafficEventBuilder,
    TrafficEventReader,
    UiLayoutState,
    UiLayoutStateBuilder,
    UiLayoutStateReader,
    UiNavigationEvent,
    UiNavigationEventBuilder,
    UiNavigationEventReader,
    WifiScan,
    WifiScanBuilder,
    WifiScanReader,
)

Map_Key = TypeVar("Map_Key")
Map_Value = TypeVar("Map_Value")
_Key = TypeVar("_Key")
_Value = TypeVar("_Value")

logVersion: int

class Map(Generic[_Key, _Value]):
    class Entry(Generic[Map_Key, Map_Value]):
        key: Map_Key
        value: Map_Value
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Map.EntryReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Map.EntryReader: ...
        @staticmethod
        def new_message() -> Map.EntryBuilder: ...
        def to_dict(self) -> dict: ...

    class EntryReader(Map.Entry):
        def as_builder(self) -> Map.EntryBuilder: ...

    class EntryBuilder(Map.Entry):
        @staticmethod
        def from_dict(dictionary: dict) -> Map.EntryBuilder: ...
        def copy(self) -> Map.EntryBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Map.EntryReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    entries: Sequence[Map.Entry | Map.EntryBuilder | Map.EntryReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[MapReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> MapReader: ...
    @staticmethod
    def new_message() -> MapBuilder: ...
    def to_dict(self) -> dict: ...

class MapReader(Map):
    entries: Sequence[Map.EntryReader]
    def as_builder(self) -> MapBuilder: ...

class MapBuilder(Map):
    entries: Sequence[Map.Entry | Map.EntryBuilder | Map.EntryReader]
    @staticmethod
    def from_dict(dictionary: dict) -> MapBuilder: ...
    def copy(self) -> MapBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> MapReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

LongitudinalPersonality = Literal["aggressive", "standard", "relaxed"]

class InitData:
    DeviceType = Literal["unknown", "neo", "chffrAndroid", "chffrIos", "tici", "pc", "tizi"]

    class AndroidBuildInfo:
        board: str
        bootloader: str
        brand: str
        device: str
        display: str
        fingerprint: str
        hardware: str
        host: str
        id: str
        manufacturer: str
        model: str
        product: str
        radioVersion: str
        serial: str
        supportedAbis: Sequence[str]
        tags: str
        time: int
        type: str
        user: str
        versionCodename: str
        versionRelease: str
        versionSdk: int
        versionSecurityPatch: str
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[InitData.AndroidBuildInfoReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> InitData.AndroidBuildInfoReader: ...
        @staticmethod
        def new_message() -> InitData.AndroidBuildInfoBuilder: ...
        def to_dict(self) -> dict: ...

    class AndroidBuildInfoReader(InitData.AndroidBuildInfo):
        def as_builder(self) -> InitData.AndroidBuildInfoBuilder: ...

    class AndroidBuildInfoBuilder(InitData.AndroidBuildInfo):
        @staticmethod
        def from_dict(dictionary: dict) -> InitData.AndroidBuildInfoBuilder: ...
        def copy(self) -> InitData.AndroidBuildInfoBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> InitData.AndroidBuildInfoReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class AndroidSensor:
        id: int
        name: str
        vendor: str
        version: int
        handle: int
        type: int
        maxRange: float
        resolution: float
        power: float
        minDelay: int
        fifoReservedEventCount: int
        fifoMaxEventCount: int
        stringType: str
        maxDelay: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[InitData.AndroidSensorReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> InitData.AndroidSensorReader: ...
        @staticmethod
        def new_message() -> InitData.AndroidSensorBuilder: ...
        def to_dict(self) -> dict: ...

    class AndroidSensorReader(InitData.AndroidSensor):
        def as_builder(self) -> InitData.AndroidSensorBuilder: ...

    class AndroidSensorBuilder(InitData.AndroidSensor):
        @staticmethod
        def from_dict(dictionary: dict) -> InitData.AndroidSensorBuilder: ...
        def copy(self) -> InitData.AndroidSensorBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> InitData.AndroidSensorReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class ChffrAndroidExtra:
        #         allCameraCharacteristics: Map[str, str] | Map[str, str]Builder | Map[str, str]Reader
        def init(self, name: Literal["allCameraCharacteristics"]) -> Map[str, str]: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[InitData.ChffrAndroidExtraReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> InitData.ChffrAndroidExtraReader: ...
        @staticmethod
        def new_message() -> InitData.ChffrAndroidExtraBuilder: ...
        def to_dict(self) -> dict: ...

    class ChffrAndroidExtraReader(InitData.ChffrAndroidExtra):
        #         allCameraCharacteristics: Map[str, str]Reader
        def as_builder(self) -> InitData.ChffrAndroidExtraBuilder: ...

    class ChffrAndroidExtraBuilder(InitData.ChffrAndroidExtra):
        #         allCameraCharacteristics: Map[str, str] | Map[str, str]Builder | Map[str, str]Reader
        @staticmethod
        def from_dict(dictionary: dict) -> InitData.ChffrAndroidExtraBuilder: ...
        def copy(self) -> InitData.ChffrAndroidExtraBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> InitData.ChffrAndroidExtraReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class PandaInfo:
        hasPanda: bool
        dongleId: str
        stVersion: str
        espVersion: str
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[InitData.PandaInfoReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> InitData.PandaInfoReader: ...
        @staticmethod
        def new_message() -> InitData.PandaInfoBuilder: ...
        def to_dict(self) -> dict: ...

    class PandaInfoReader(InitData.PandaInfo):
        def as_builder(self) -> InitData.PandaInfoBuilder: ...

    class PandaInfoBuilder(InitData.PandaInfo):
        @staticmethod
        def from_dict(dictionary: dict) -> InitData.PandaInfoBuilder: ...
        def copy(self) -> InitData.PandaInfoBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> InitData.PandaInfoReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class IosBuildInfo:
        appVersion: str
        appBuild: int
        osVersion: str
        deviceModel: str
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[InitData.IosBuildInfoReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> InitData.IosBuildInfoReader: ...
        @staticmethod
        def new_message() -> InitData.IosBuildInfoBuilder: ...
        def to_dict(self) -> dict: ...

    class IosBuildInfoReader(InitData.IosBuildInfo):
        def as_builder(self) -> InitData.IosBuildInfoBuilder: ...

    class IosBuildInfoBuilder(InitData.IosBuildInfo):
        @staticmethod
        def from_dict(dictionary: dict) -> InitData.IosBuildInfoBuilder: ...
        def copy(self) -> InitData.IosBuildInfoBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> InitData.IosBuildInfoReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    kernelArgs: Sequence[str]
    gctxDEPRECATED: str
    dongleId: str
    deviceType: InitData.DeviceType
    version: str
    androidBuildInfo: InitData.AndroidBuildInfo | InitData.AndroidBuildInfoBuilder | InitData.AndroidBuildInfoReader
    androidSensorsDEPRECATED: Sequence[
        InitData.AndroidSensor | InitData.AndroidSensorBuilder | InitData.AndroidSensorReader
    ]
    chffrAndroidExtraDEPRECATED: InitData.ChffrAndroidExtra | InitData.ChffrAndroidExtraBuilder | InitData.ChffrAndroidExtraReader
    pandaInfo: InitData.PandaInfo | InitData.PandaInfoBuilder | InitData.PandaInfoReader
    dirty: bool
    gitCommit: str
    gitBranch: str
    passive: bool
    gitRemote: str
    iosBuildInfoDEPRECATED: InitData.IosBuildInfo | InitData.IosBuildInfoBuilder | InitData.IosBuildInfoReader
    kernelVersion: str
    #     androidProperties: Map[str, str] | Map[str, str]Builder | Map[str, str]Reader
    #     params: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    osVersion: str
    #     commands: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    @overload
    def init(self, name: Literal["androidBuildInfo"]) -> InitData.AndroidBuildInfo: ...
    @overload
    def init(self, name: Literal["chffrAndroidExtraDEPRECATED"]) -> InitData.ChffrAndroidExtra: ...
    @overload
    def init(self, name: Literal["pandaInfo"]) -> InitData.PandaInfo: ...
    @overload
    def init(self, name: Literal["iosBuildInfoDEPRECATED"]) -> InitData.IosBuildInfo: ...
    @overload
    def init(self, name: Literal["androidProperties"]) -> Map[str, str]: ...
    @overload
    def init(self, name: Literal["params"]) -> Map[str, bytes]: ...
    @overload
    def init(self, name: Literal["commands"]) -> Map[str, bytes]: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[InitDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> InitDataReader: ...
    @staticmethod
    def new_message() -> InitDataBuilder: ...
    def to_dict(self) -> dict: ...

class InitDataReader(InitData):
    androidBuildInfo: InitData.AndroidBuildInfoReader
    androidSensorsDEPRECATED: Sequence[InitData.AndroidSensorReader]
    chffrAndroidExtraDEPRECATED: InitData.ChffrAndroidExtraReader
    pandaInfo: InitData.PandaInfoReader
    iosBuildInfoDEPRECATED: InitData.IosBuildInfoReader
    #     androidProperties: Map[str, str]Reader
    #     params: Map[str, bytes]Reader
    #     commands: Map[str, bytes]Reader
    def as_builder(self) -> InitDataBuilder: ...

class InitDataBuilder(InitData):
    androidBuildInfo: InitData.AndroidBuildInfo | InitData.AndroidBuildInfoBuilder | InitData.AndroidBuildInfoReader
    androidSensorsDEPRECATED: Sequence[
        InitData.AndroidSensor | InitData.AndroidSensorBuilder | InitData.AndroidSensorReader
    ]
    chffrAndroidExtraDEPRECATED: InitData.ChffrAndroidExtra | InitData.ChffrAndroidExtraBuilder | InitData.ChffrAndroidExtraReader
    pandaInfo: InitData.PandaInfo | InitData.PandaInfoBuilder | InitData.PandaInfoReader
    iosBuildInfoDEPRECATED: InitData.IosBuildInfo | InitData.IosBuildInfoBuilder | InitData.IosBuildInfoReader
    #     androidProperties: Map[str, str] | Map[str, str]Builder | Map[str, str]Reader
    #     params: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    #     commands: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    @staticmethod
    def from_dict(dictionary: dict) -> InitDataBuilder: ...
    def copy(self) -> InitDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> InitDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class FrameData:
    FrameType = Literal["unknown", "neo", "chffrAndroid", "front"]

    class AndroidCaptureResult:
        sensitivity: int
        frameDuration: int
        exposureTime: int
        rollingShutterSkew: int
        colorCorrectionTransform: Sequence[int]
        colorCorrectionGains: Sequence[float]
        displayRotation: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[FrameData.AndroidCaptureResultReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> FrameData.AndroidCaptureResultReader: ...
        @staticmethod
        def new_message() -> FrameData.AndroidCaptureResultBuilder: ...
        def to_dict(self) -> dict: ...

    class AndroidCaptureResultReader(FrameData.AndroidCaptureResult):
        def as_builder(self) -> FrameData.AndroidCaptureResultBuilder: ...

    class AndroidCaptureResultBuilder(FrameData.AndroidCaptureResult):
        @staticmethod
        def from_dict(dictionary: dict) -> FrameData.AndroidCaptureResultBuilder: ...
        def copy(self) -> FrameData.AndroidCaptureResultBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> FrameData.AndroidCaptureResultReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    ImageSensor = Literal["unknown", "ar0231", "ox03c10"]
    frameId: int
    encodeId: int
    timestampEof: int
    frameLengthDEPRECATED: int
    integLines: int
    globalGainDEPRECATED: int
    image: bytes
    frameType: FrameData.FrameType
    timestampSof: int
    androidCaptureResultDEPRECATED: FrameData.AndroidCaptureResult | FrameData.AndroidCaptureResultBuilder | FrameData.AndroidCaptureResultReader
    transform: Sequence[float]
    lensPosDEPRECATED: int
    lensSagDEPRECATED: float
    lensErrDEPRECATED: float
    lensTruePosDEPRECATED: float
    gain: float
    focusValDEPRECATED: Sequence[int]
    focusConfDEPRECATED: Sequence[int]
    sharpnessScoreDEPRECATED: Sequence[int]
    recoverStateDEPRECATED: int
    highConversionGain: bool
    measuredGreyFraction: float
    targetGreyFraction: float
    processingTime: float
    temperaturesC: Sequence[float]
    frameIdSensor: int
    sensor: FrameData.ImageSensor
    exposureValPercent: float
    def init(self, name: Literal["androidCaptureResultDEPRECATED"]) -> FrameData.AndroidCaptureResult: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[FrameDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> FrameDataReader: ...
    @staticmethod
    def new_message() -> FrameDataBuilder: ...
    def to_dict(self) -> dict: ...

class FrameDataReader(FrameData):
    androidCaptureResultDEPRECATED: FrameData.AndroidCaptureResultReader
    def as_builder(self) -> FrameDataBuilder: ...

class FrameDataBuilder(FrameData):
    androidCaptureResultDEPRECATED: FrameData.AndroidCaptureResult | FrameData.AndroidCaptureResultBuilder | FrameData.AndroidCaptureResultReader
    @staticmethod
    def from_dict(dictionary: dict) -> FrameDataBuilder: ...
    def copy(self) -> FrameDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> FrameDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Thumbnail:
    frameId: int
    timestampEof: int
    thumbnail: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ThumbnailReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ThumbnailReader: ...
    @staticmethod
    def new_message() -> ThumbnailBuilder: ...
    def to_dict(self) -> dict: ...

class ThumbnailReader(Thumbnail):
    def as_builder(self) -> ThumbnailBuilder: ...

class ThumbnailBuilder(Thumbnail):
    @staticmethod
    def from_dict(dictionary: dict) -> ThumbnailBuilder: ...
    def copy(self) -> ThumbnailBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ThumbnailReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class GPSNMEAData:
    timestamp: int
    localWallTime: int
    nmea: str
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[GPSNMEADataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> GPSNMEADataReader: ...
    @staticmethod
    def new_message() -> GPSNMEADataBuilder: ...
    def to_dict(self) -> dict: ...

class GPSNMEADataReader(GPSNMEAData):
    def as_builder(self) -> GPSNMEADataBuilder: ...

class GPSNMEADataBuilder(GPSNMEAData):
    @staticmethod
    def from_dict(dictionary: dict) -> GPSNMEADataBuilder: ...
    def copy(self) -> GPSNMEADataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> GPSNMEADataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SensorEventData:
    class SensorVec:
        v: Sequence[float]
        status: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[SensorEventData.SensorVecReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> SensorEventData.SensorVecReader: ...
        @staticmethod
        def new_message() -> SensorEventData.SensorVecBuilder: ...
        def to_dict(self) -> dict: ...

    class SensorVecReader(SensorEventData.SensorVec):
        def as_builder(self) -> SensorEventData.SensorVecBuilder: ...

    class SensorVecBuilder(SensorEventData.SensorVec):
        @staticmethod
        def from_dict(dictionary: dict) -> SensorEventData.SensorVecBuilder: ...
        def copy(self) -> SensorEventData.SensorVecBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> SensorEventData.SensorVecReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    SensorSource = Literal[
        "android",
        "iOS",
        "fiber",
        "velodyne",
        "bno055",
        "lsm6ds3",
        "bmp280",
        "mmc3416x",
        "bmx055",
        "rpr0521",
        "lsm6ds3trc",
        "mmc5603nj",
    ]
    version: int
    sensor: int
    type: int
    timestamp: int
    acceleration: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    magnetic: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    orientation: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    gyro: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    source: SensorEventData.SensorSource
    pressure: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    uncalibratedDEPRECATED: bool
    magneticUncalibrated: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    gyroUncalibrated: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    proximity: float
    light: float
    temperature: float
    def which(
        self,
    ) -> Literal[
        "acceleration",
        "magnetic",
        "orientation",
        "gyro",
        "pressure",
        "magneticUncalibrated",
        "gyroUncalibrated",
        "proximity",
        "light",
        "temperature",
    ]: ...
    @overload
    def init(self, name: Literal["acceleration"]) -> SensorEventData.SensorVec: ...
    @overload
    def init(self, name: Literal["magnetic"]) -> SensorEventData.SensorVec: ...
    @overload
    def init(self, name: Literal["orientation"]) -> SensorEventData.SensorVec: ...
    @overload
    def init(self, name: Literal["gyro"]) -> SensorEventData.SensorVec: ...
    @overload
    def init(self, name: Literal["pressure"]) -> SensorEventData.SensorVec: ...
    @overload
    def init(self, name: Literal["magneticUncalibrated"]) -> SensorEventData.SensorVec: ...
    @overload
    def init(self, name: Literal["gyroUncalibrated"]) -> SensorEventData.SensorVec: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SensorEventDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SensorEventDataReader: ...
    @staticmethod
    def new_message() -> SensorEventDataBuilder: ...
    def to_dict(self) -> dict: ...

class SensorEventDataReader(SensorEventData):
    acceleration: SensorEventData.SensorVecReader
    magnetic: SensorEventData.SensorVecReader
    orientation: SensorEventData.SensorVecReader
    gyro: SensorEventData.SensorVecReader
    pressure: SensorEventData.SensorVecReader
    magneticUncalibrated: SensorEventData.SensorVecReader
    gyroUncalibrated: SensorEventData.SensorVecReader
    def as_builder(self) -> SensorEventDataBuilder: ...

class SensorEventDataBuilder(SensorEventData):
    acceleration: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    magnetic: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    orientation: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    gyro: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    pressure: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    magneticUncalibrated: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    gyroUncalibrated: SensorEventData.SensorVec | SensorEventData.SensorVecBuilder | SensorEventData.SensorVecReader
    @staticmethod
    def from_dict(dictionary: dict) -> SensorEventDataBuilder: ...
    def copy(self) -> SensorEventDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SensorEventDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class GpsLocationData:
    SensorSource = Literal["android", "iOS", "car", "velodyne", "fusion", "external", "ublox", "trimble", "qcomdiag"]
    flags: int
    latitude: float
    longitude: float
    altitude: float
    speed: float
    bearingDeg: float
    accuracy: float
    unixTimestampMillis: int
    source: GpsLocationData.SensorSource
    vNED: Sequence[float]
    verticalAccuracy: float
    bearingAccuracyDeg: float
    speedAccuracy: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[GpsLocationDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> GpsLocationDataReader: ...
    @staticmethod
    def new_message() -> GpsLocationDataBuilder: ...
    def to_dict(self) -> dict: ...

class GpsLocationDataReader(GpsLocationData):
    def as_builder(self) -> GpsLocationDataBuilder: ...

class GpsLocationDataBuilder(GpsLocationData):
    @staticmethod
    def from_dict(dictionary: dict) -> GpsLocationDataBuilder: ...
    def copy(self) -> GpsLocationDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> GpsLocationDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class CanData:
    address: int
    busTime: int
    dat: bytes
    src: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[CanDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> CanDataReader: ...
    @staticmethod
    def new_message() -> CanDataBuilder: ...
    def to_dict(self) -> dict: ...

class CanDataReader(CanData):
    def as_builder(self) -> CanDataBuilder: ...

class CanDataBuilder(CanData):
    @staticmethod
    def from_dict(dictionary: dict) -> CanDataBuilder: ...
    def copy(self) -> CanDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> CanDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DeviceState:
    ThermalStatus = Literal["green", "yellow", "red", "danger"]
    NetworkType = Literal["none", "wifi", "cell2G", "cell3G", "cell4G", "cell5G", "ethernet"]
    NetworkStrength = Literal["unknown", "poor", "moderate", "good", "great"]

    class NetworkInfo:
        technology: str
        operator: str
        band: str
        channel: int
        extra: str
        state: str
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[DeviceState.NetworkInfoReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> DeviceState.NetworkInfoReader: ...
        @staticmethod
        def new_message() -> DeviceState.NetworkInfoBuilder: ...
        def to_dict(self) -> dict: ...

    class NetworkInfoReader(DeviceState.NetworkInfo):
        def as_builder(self) -> DeviceState.NetworkInfoBuilder: ...

    class NetworkInfoBuilder(DeviceState.NetworkInfo):
        @staticmethod
        def from_dict(dictionary: dict) -> DeviceState.NetworkInfoBuilder: ...
        def copy(self) -> DeviceState.NetworkInfoBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> DeviceState.NetworkInfoReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class ThermalZone:
        name: str
        temp: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[DeviceState.ThermalZoneReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> DeviceState.ThermalZoneReader: ...
        @staticmethod
        def new_message() -> DeviceState.ThermalZoneBuilder: ...
        def to_dict(self) -> dict: ...

    class ThermalZoneReader(DeviceState.ThermalZone):
        def as_builder(self) -> DeviceState.ThermalZoneBuilder: ...

    class ThermalZoneBuilder(DeviceState.ThermalZone):
        @staticmethod
        def from_dict(dictionary: dict) -> DeviceState.ThermalZoneBuilder: ...
        def copy(self) -> DeviceState.ThermalZoneBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> DeviceState.ThermalZoneReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class NetworkStats:
        wwanTx: int
        wwanRx: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[DeviceState.NetworkStatsReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> DeviceState.NetworkStatsReader: ...
        @staticmethod
        def new_message() -> DeviceState.NetworkStatsBuilder: ...
        def to_dict(self) -> dict: ...

    class NetworkStatsReader(DeviceState.NetworkStats):
        def as_builder(self) -> DeviceState.NetworkStatsBuilder: ...

    class NetworkStatsBuilder(DeviceState.NetworkStats):
        @staticmethod
        def from_dict(dictionary: dict) -> DeviceState.NetworkStatsBuilder: ...
        def copy(self) -> DeviceState.NetworkStatsBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> DeviceState.NetworkStatsReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    cpu0DEPRECATED: int
    cpu1DEPRECATED: int
    cpu2DEPRECATED: int
    cpu3DEPRECATED: int
    memDEPRECATED: int
    gpuDEPRECATED: int
    batDEPRECATED: int
    freeSpacePercent: float
    batteryPercentDEPRECATED: int
    batteryStatusDEPRECATED: str
    fanSpeedPercentDesired: int
    started: bool
    usbOnlineDEPRECATED: bool
    startedMonoTime: int
    thermalStatus: DeviceState.ThermalStatus
    batteryCurrentDEPRECATED: int
    batteryVoltageDEPRECATED: int
    chargingErrorDEPRECATED: bool
    chargingDisabledDEPRECATED: bool
    memoryUsagePercent: int
    cpuUsagePercentDEPRECATED: int
    pa0DEPRECATED: int
    networkType: DeviceState.NetworkType
    offroadPowerUsageUwh: int
    networkStrength: DeviceState.NetworkStrength
    carBatteryCapacityUwh: int
    cpuTempC: Sequence[float]
    gpuTempC: Sequence[float]
    memoryTempC: float
    batteryTempCDEPRECATED: float
    ambientTempC: float
    networkInfo: DeviceState.NetworkInfo | DeviceState.NetworkInfoBuilder | DeviceState.NetworkInfoReader
    lastAthenaPingTime: int
    gpuUsagePercent: int
    cpuUsagePercent: Sequence[int]
    nvmeTempC: Sequence[float]
    modemTempC: Sequence[float]
    screenBrightnessPercent: int
    thermalZones: Sequence[DeviceState.ThermalZone | DeviceState.ThermalZoneBuilder | DeviceState.ThermalZoneReader]
    pmicTempC: Sequence[float]
    powerDrawW: float
    networkMetered: bool
    somPowerDrawW: float
    networkStats: DeviceState.NetworkStats | DeviceState.NetworkStatsBuilder | DeviceState.NetworkStatsReader
    maxTempC: float
    @overload
    def init(self, name: Literal["networkInfo"]) -> DeviceState.NetworkInfo: ...
    @overload
    def init(self, name: Literal["networkStats"]) -> DeviceState.NetworkStats: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DeviceStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DeviceStateReader: ...
    @staticmethod
    def new_message() -> DeviceStateBuilder: ...
    def to_dict(self) -> dict: ...

class DeviceStateReader(DeviceState):
    networkInfo: DeviceState.NetworkInfoReader
    thermalZones: Sequence[DeviceState.ThermalZoneReader]
    networkStats: DeviceState.NetworkStatsReader
    def as_builder(self) -> DeviceStateBuilder: ...

class DeviceStateBuilder(DeviceState):
    networkInfo: DeviceState.NetworkInfo | DeviceState.NetworkInfoBuilder | DeviceState.NetworkInfoReader
    thermalZones: Sequence[DeviceState.ThermalZone | DeviceState.ThermalZoneBuilder | DeviceState.ThermalZoneReader]
    networkStats: DeviceState.NetworkStats | DeviceState.NetworkStatsBuilder | DeviceState.NetworkStatsReader
    @staticmethod
    def from_dict(dictionary: dict) -> DeviceStateBuilder: ...
    def copy(self) -> DeviceStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DeviceStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PandaState:
    PandaType = Literal[
        "unknown", "whitePanda", "greyPanda", "blackPanda", "pedal", "uno", "dos", "redPanda", "redPandaV2", "tres"
    ]
    UsbPowerModeDEPRECATED = Literal["none", "client", "cdp", "dcp"]
    SafetyModel = Literal[
        "silent",
        "hondaNidec",
        "toyota",
        "elm327",
        "gm",
        "hondaBoschGiraffe",
        "ford",
        "cadillac",
        "hyundai",
        "chrysler",
        "tesla",
        "subaru",
        "gmPassive",
        "mazda",
        "nissan",
        "volkswagen",
        "toyotaIpas",
        "allOutput",
        "gmAscm",
        "noOutput",
        "hondaBosch",
        "volkswagenPq",
        "subaruPreglobal",
        "hyundaiLegacy",
        "hyundaiCommunity",
        "volkswagenMlb",
        "hongqi",
        "body",
        "hyundaiCanfd",
        "volkswagenMqbEvo",
    ]
    FaultStatus = Literal["none", "faultTemp", "faultPerm"]
    FaultType = Literal[
        "relayMalfunction",
        "unusedInterruptHandled",
        "interruptRateCan1",
        "interruptRateCan2",
        "interruptRateCan3",
        "interruptRateTach",
        "interruptRateGmlan",
        "interruptRateInterrupts",
        "interruptRateSpiDma",
        "interruptRateSpiCs",
        "interruptRateUart1",
        "interruptRateUart2",
        "interruptRateUart3",
        "interruptRateUart5",
        "interruptRateUartDma",
        "interruptRateUsb",
        "interruptRateTim1",
        "interruptRateTim3",
        "registerDivergent",
        "interruptRateKlineInit",
        "interruptRateClockSource",
        "interruptRateTick",
        "interruptRateExti",
        "interruptRateSpi",
        "interruptRateUart7",
        "sirenMalfunction",
        "heartbeatLoopWatchdog",
    ]
    HarnessStatus = Literal["notConnected", "normal", "flipped"]

    class PandaCanState:
        LecErrorCode = Literal[
            "noError", "stuffError", "formError", "ackError", "bit1Error", "bit0Error", "crcError", "noChange"
        ]
        busOff: bool
        busOffCnt: int
        errorWarning: bool
        errorPassive: bool
        lastError: PandaState.PandaCanState.LecErrorCode
        lastStoredError: PandaState.PandaCanState.LecErrorCode
        lastDataError: PandaState.PandaCanState.LecErrorCode
        lastDataStoredError: PandaState.PandaCanState.LecErrorCode
        receiveErrorCnt: int
        transmitErrorCnt: int
        totalErrorCnt: int
        totalTxLostCnt: int
        totalRxLostCnt: int
        totalTxCnt: int
        totalRxCnt: int
        totalFwdCnt: int
        canSpeed: int
        canDataSpeed: int
        canfdEnabled: bool
        brsEnabled: bool
        canfdNonIso: bool
        irq0CallRate: int
        irq1CallRate: int
        irq2CallRate: int
        canCoreResetCnt: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[PandaState.PandaCanStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> PandaState.PandaCanStateReader: ...
        @staticmethod
        def new_message() -> PandaState.PandaCanStateBuilder: ...
        def to_dict(self) -> dict: ...

    class PandaCanStateReader(PandaState.PandaCanState):
        def as_builder(self) -> PandaState.PandaCanStateBuilder: ...

    class PandaCanStateBuilder(PandaState.PandaCanState):
        @staticmethod
        def from_dict(dictionary: dict) -> PandaState.PandaCanStateBuilder: ...
        def copy(self) -> PandaState.PandaCanStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> PandaState.PandaCanStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    voltage: int
    current: int
    ignitionLine: bool
    controlsAllowed: bool
    gasInterceptorDetected: bool
    startedSignalDetectedDEPRECATED: bool
    hasGpsDEPRECATED: bool
    rxBufferOverflow: int
    txBufferOverflow: int
    gmlanSendErrs: int
    pandaType: PandaState.PandaType
    fanSpeedRpmDEPRECATED: int
    usbPowerModeDEPRECATED: PandaState.UsbPowerModeDEPRECATED
    ignitionCan: bool
    safetyModel: PandaState.SafetyModel
    faultStatus: PandaState.FaultStatus
    powerSaveEnabled: bool
    uptime: int
    faults: Sequence[PandaState.FaultType | PandaState.FaultTypeBuilder | PandaState.FaultTypeReader]
    safetyRxInvalid: int
    safetyParamDEPRECATED: int
    harnessStatus: PandaState.HarnessStatus
    heartbeatLost: bool
    alternativeExperience: int
    safetyTxBlocked: int
    interruptLoad: float
    safetyParam2DEPRECATED: int
    safetyParam: int
    fanPower: int
    canState0: PandaState.PandaCanState | PandaState.PandaCanStateBuilder | PandaState.PandaCanStateReader
    canState1: PandaState.PandaCanState | PandaState.PandaCanStateBuilder | PandaState.PandaCanStateReader
    canState2: PandaState.PandaCanState | PandaState.PandaCanStateBuilder | PandaState.PandaCanStateReader
    safetyRxChecksInvalid: bool
    spiChecksumErrorCount: int
    fanStallCount: int
    sbu1Voltage: float
    sbu2Voltage: float
    @overload
    def init(self, name: Literal["canState0"]) -> PandaState.PandaCanState: ...
    @overload
    def init(self, name: Literal["canState1"]) -> PandaState.PandaCanState: ...
    @overload
    def init(self, name: Literal["canState2"]) -> PandaState.PandaCanState: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PandaStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PandaStateReader: ...
    @staticmethod
    def new_message() -> PandaStateBuilder: ...
    def to_dict(self) -> dict: ...

class PandaStateReader(PandaState):
    faults: Sequence[PandaState.FaultTypeReader]
    canState0: PandaState.PandaCanStateReader
    canState1: PandaState.PandaCanStateReader
    canState2: PandaState.PandaCanStateReader
    def as_builder(self) -> PandaStateBuilder: ...

class PandaStateBuilder(PandaState):
    faults: Sequence[PandaState.FaultType | PandaState.FaultTypeBuilder | PandaState.FaultTypeReader]
    canState0: PandaState.PandaCanState | PandaState.PandaCanStateBuilder | PandaState.PandaCanStateReader
    canState1: PandaState.PandaCanState | PandaState.PandaCanStateBuilder | PandaState.PandaCanStateReader
    canState2: PandaState.PandaCanState | PandaState.PandaCanStateBuilder | PandaState.PandaCanStateReader
    @staticmethod
    def from_dict(dictionary: dict) -> PandaStateBuilder: ...
    def copy(self) -> PandaStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PandaStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PeripheralState:
    pandaType: PandaState.PandaType
    voltage: int
    current: int
    fanSpeedRpm: int
    usbPowerModeDEPRECATED: PandaState.UsbPowerModeDEPRECATED
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PeripheralStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PeripheralStateReader: ...
    @staticmethod
    def new_message() -> PeripheralStateBuilder: ...
    def to_dict(self) -> dict: ...

class PeripheralStateReader(PeripheralState):
    def as_builder(self) -> PeripheralStateBuilder: ...

class PeripheralStateBuilder(PeripheralState):
    @staticmethod
    def from_dict(dictionary: dict) -> PeripheralStateBuilder: ...
    def copy(self) -> PeripheralStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PeripheralStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class RadarState:
    class LeadData:
        dRel: float
        yRel: float
        vRel: float
        aRel: float
        vLead: float
        aLeadDEPRECATED: float
        dPath: float
        vLat: float
        vLeadK: float
        aLeadK: float
        fcw: bool
        status: bool
        aLeadTau: float
        modelProb: float
        radar: bool
        radarTrackId: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[RadarState.LeadDataReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> RadarState.LeadDataReader: ...
        @staticmethod
        def new_message() -> RadarState.LeadDataBuilder: ...
        def to_dict(self) -> dict: ...

    class LeadDataReader(RadarState.LeadData):
        def as_builder(self) -> RadarState.LeadDataBuilder: ...

    class LeadDataBuilder(RadarState.LeadData):
        @staticmethod
        def from_dict(dictionary: dict) -> RadarState.LeadDataBuilder: ...
        def copy(self) -> RadarState.LeadDataBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> RadarState.LeadDataReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    Error = Literal["canError", "fault", "wrongConfig"]
    warpMatrixDEPRECATED: Sequence[float]
    angleOffsetDEPRECATED: float
    calStatusDEPRECATED: int
    leadOne: RadarState.LeadData | RadarState.LeadDataBuilder | RadarState.LeadDataReader
    leadTwo: RadarState.LeadData | RadarState.LeadDataBuilder | RadarState.LeadDataReader
    cumLagMs: float
    mdMonoTime: int
    ftMonoTimeDEPRECATED: int
    calCycleDEPRECATED: int
    calPercDEPRECATED: int
    canMonoTimesDEPRECATED: Sequence[int]
    carStateMonoTime: int
    radarErrors: Sequence[RadarState.Error | RadarState.ErrorBuilder | RadarState.ErrorReader]
    @overload
    def init(self, name: Literal["leadOne"]) -> RadarState.LeadData: ...
    @overload
    def init(self, name: Literal["leadTwo"]) -> RadarState.LeadData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[RadarStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> RadarStateReader: ...
    @staticmethod
    def new_message() -> RadarStateBuilder: ...
    def to_dict(self) -> dict: ...

class RadarStateReader(RadarState):
    leadOne: RadarState.LeadDataReader
    leadTwo: RadarState.LeadDataReader
    radarErrors: Sequence[RadarState.ErrorReader]
    def as_builder(self) -> RadarStateBuilder: ...

class RadarStateBuilder(RadarState):
    leadOne: RadarState.LeadData | RadarState.LeadDataBuilder | RadarState.LeadDataReader
    leadTwo: RadarState.LeadData | RadarState.LeadDataBuilder | RadarState.LeadDataReader
    radarErrors: Sequence[RadarState.Error | RadarState.ErrorBuilder | RadarState.ErrorReader]
    @staticmethod
    def from_dict(dictionary: dict) -> RadarStateBuilder: ...
    def copy(self) -> RadarStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RadarStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveCalibrationData:
    Status = Literal["uncalibrated", "calibrated", "invalid", "recalibrating"]
    warpMatrixDEPRECATED: Sequence[float]
    calStatusDEPRECATED: int
    calCycle: int
    calPerc: int
    extrinsicMatrix: Sequence[float]
    warpMatrix2DEPRECATED: Sequence[float]
    warpMatrixBigDEPRECATED: Sequence[float]
    rpyCalib: Sequence[float]
    rpyCalibSpread: Sequence[float]
    validBlocks: int
    wideFromDeviceEuler: Sequence[float]
    calStatus: LiveCalibrationData.Status
    height: Sequence[float]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveCalibrationDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveCalibrationDataReader: ...
    @staticmethod
    def new_message() -> LiveCalibrationDataBuilder: ...
    def to_dict(self) -> dict: ...

class LiveCalibrationDataReader(LiveCalibrationData):
    def as_builder(self) -> LiveCalibrationDataBuilder: ...

class LiveCalibrationDataBuilder(LiveCalibrationData):
    @staticmethod
    def from_dict(dictionary: dict) -> LiveCalibrationDataBuilder: ...
    def copy(self) -> LiveCalibrationDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveCalibrationDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveTracks:
    trackId: int
    dRel: float
    yRel: float
    vRel: float
    aRel: float
    timeStamp: float
    status: float
    currentTime: float
    stationary: bool
    oncoming: bool
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveTracksReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveTracksReader: ...
    @staticmethod
    def new_message() -> LiveTracksBuilder: ...
    def to_dict(self) -> dict: ...

class LiveTracksReader(LiveTracks):
    def as_builder(self) -> LiveTracksBuilder: ...

class LiveTracksBuilder(LiveTracks):
    @staticmethod
    def from_dict(dictionary: dict) -> LiveTracksBuilder: ...
    def copy(self) -> LiveTracksBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveTracksReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class ControlsState:
    LongControlState = Literal["off", "pid", "stopping", "starting"]
    OpenpilotState = Literal["disabled", "preEnabled", "enabled", "softDisabling", "overriding"]
    AlertStatus = Literal["normal", "userPrompt", "critical"]
    AlertSize = Literal["none", "small", "mid", "full"]

    class LateralINDIState:
        active: bool
        steeringAngleDeg: float
        steeringRateDeg: float
        steeringAccelDeg: float
        rateSetPoint: float
        accelSetPoint: float
        accelError: float
        delayedOutput: float
        delta: float
        output: float
        saturated: bool
        steeringAngleDesiredDeg: float
        steeringRateDesiredDeg: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralINDIStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralINDIStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralINDIStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralINDIStateReader(ControlsState.LateralINDIState):
        def as_builder(self) -> ControlsState.LateralINDIStateBuilder: ...

    class LateralINDIStateBuilder(ControlsState.LateralINDIState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralINDIStateBuilder: ...
        def copy(self) -> ControlsState.LateralINDIStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralINDIStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralPIDState:
        active: bool
        steeringAngleDeg: float
        steeringRateDeg: float
        angleError: float
        p: float
        i: float
        f: float
        output: float
        saturated: bool
        steeringAngleDesiredDeg: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralPIDStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralPIDStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralPIDStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralPIDStateReader(ControlsState.LateralPIDState):
        def as_builder(self) -> ControlsState.LateralPIDStateBuilder: ...

    class LateralPIDStateBuilder(ControlsState.LateralPIDState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralPIDStateBuilder: ...
        def copy(self) -> ControlsState.LateralPIDStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralPIDStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralLQRState:
        active: bool
        steeringAngleDeg: float
        i: float
        output: float
        lqrOutput: float
        saturated: bool
        steeringAngleDesiredDeg: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralLQRStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralLQRStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralLQRStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralLQRStateReader(ControlsState.LateralLQRState):
        def as_builder(self) -> ControlsState.LateralLQRStateBuilder: ...

    class LateralLQRStateBuilder(ControlsState.LateralLQRState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralLQRStateBuilder: ...
        def copy(self) -> ControlsState.LateralLQRStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralLQRStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralAngleState:
        active: bool
        steeringAngleDeg: float
        output: float
        saturated: bool
        steeringAngleDesiredDeg: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralAngleStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralAngleStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralAngleStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralAngleStateReader(ControlsState.LateralAngleState):
        def as_builder(self) -> ControlsState.LateralAngleStateBuilder: ...

    class LateralAngleStateBuilder(ControlsState.LateralAngleState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralAngleStateBuilder: ...
        def copy(self) -> ControlsState.LateralAngleStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralAngleStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralDebugState:
        active: bool
        steeringAngleDeg: float
        output: float
        saturated: bool
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralDebugStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralDebugStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralDebugStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralDebugStateReader(ControlsState.LateralDebugState):
        def as_builder(self) -> ControlsState.LateralDebugStateBuilder: ...

    class LateralDebugStateBuilder(ControlsState.LateralDebugState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralDebugStateBuilder: ...
        def copy(self) -> ControlsState.LateralDebugStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralDebugStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralTorqueState:
        active: bool
        error: float
        p: float
        i: float
        d: float
        f: float
        output: float
        saturated: bool
        errorRate: float
        actualLateralAccel: float
        desiredLateralAccel: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralTorqueStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralTorqueStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralTorqueStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralTorqueStateReader(ControlsState.LateralTorqueState):
        def as_builder(self) -> ControlsState.LateralTorqueStateBuilder: ...

    class LateralTorqueStateBuilder(ControlsState.LateralTorqueState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralTorqueStateBuilder: ...
        def copy(self) -> ControlsState.LateralTorqueStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralTorqueStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralCurvatureState:
        active: bool
        actualCurvature: float
        desiredCurvature: float
        error: float
        p: float
        i: float
        f: float
        output: float
        saturated: bool
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralCurvatureStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralCurvatureStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralCurvatureStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralCurvatureStateReader(ControlsState.LateralCurvatureState):
        def as_builder(self) -> ControlsState.LateralCurvatureStateBuilder: ...

    class LateralCurvatureStateBuilder(ControlsState.LateralCurvatureState):
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralCurvatureStateBuilder: ...
        def copy(self) -> ControlsState.LateralCurvatureStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralCurvatureStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LateralControlState:
        indiState: ControlsState.LateralINDIState | ControlsState.LateralINDIStateBuilder | ControlsState.LateralINDIStateReader
        pidState: ControlsState.LateralPIDState | ControlsState.LateralPIDStateBuilder | ControlsState.LateralPIDStateReader
        lqrStateDEPRECATED: ControlsState.LateralLQRState | ControlsState.LateralLQRStateBuilder | ControlsState.LateralLQRStateReader
        angleState: ControlsState.LateralAngleState | ControlsState.LateralAngleStateBuilder | ControlsState.LateralAngleStateReader
        debugState: ControlsState.LateralDebugState | ControlsState.LateralDebugStateBuilder | ControlsState.LateralDebugStateReader
        torqueState: ControlsState.LateralTorqueState | ControlsState.LateralTorqueStateBuilder | ControlsState.LateralTorqueStateReader
        curvatureState: ControlsState.LateralCurvatureState | ControlsState.LateralCurvatureStateBuilder | ControlsState.LateralCurvatureStateReader
        def which(
            self,
        ) -> Literal[
            "indiState", "pidState", "lqrStateDEPRECATED", "angleState", "debugState", "torqueState", "curvatureState"
        ]: ...
        @overload
        def init(self, name: Literal["indiState"]) -> ControlsState.LateralINDIState: ...
        @overload
        def init(self, name: Literal["pidState"]) -> ControlsState.LateralPIDState: ...
        @overload
        def init(self, name: Literal["lqrStateDEPRECATED"]) -> ControlsState.LateralLQRState: ...
        @overload
        def init(self, name: Literal["angleState"]) -> ControlsState.LateralAngleState: ...
        @overload
        def init(self, name: Literal["debugState"]) -> ControlsState.LateralDebugState: ...
        @overload
        def init(self, name: Literal["torqueState"]) -> ControlsState.LateralTorqueState: ...
        @overload
        def init(self, name: Literal["curvatureState"]) -> ControlsState.LateralCurvatureState: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ControlsState.LateralControlStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ControlsState.LateralControlStateReader: ...
        @staticmethod
        def new_message() -> ControlsState.LateralControlStateBuilder: ...
        def to_dict(self) -> dict: ...

    class LateralControlStateReader(ControlsState.LateralControlState):
        indiState: ControlsState.LateralINDIStateReader
        pidState: ControlsState.LateralPIDStateReader
        lqrStateDEPRECATED: ControlsState.LateralLQRStateReader
        angleState: ControlsState.LateralAngleStateReader
        debugState: ControlsState.LateralDebugStateReader
        torqueState: ControlsState.LateralTorqueStateReader
        curvatureState: ControlsState.LateralCurvatureStateReader
        def as_builder(self) -> ControlsState.LateralControlStateBuilder: ...

    class LateralControlStateBuilder(ControlsState.LateralControlState):
        indiState: ControlsState.LateralINDIState | ControlsState.LateralINDIStateBuilder | ControlsState.LateralINDIStateReader
        pidState: ControlsState.LateralPIDState | ControlsState.LateralPIDStateBuilder | ControlsState.LateralPIDStateReader
        lqrStateDEPRECATED: ControlsState.LateralLQRState | ControlsState.LateralLQRStateBuilder | ControlsState.LateralLQRStateReader
        angleState: ControlsState.LateralAngleState | ControlsState.LateralAngleStateBuilder | ControlsState.LateralAngleStateReader
        debugState: ControlsState.LateralDebugState | ControlsState.LateralDebugStateBuilder | ControlsState.LateralDebugStateReader
        torqueState: ControlsState.LateralTorqueState | ControlsState.LateralTorqueStateBuilder | ControlsState.LateralTorqueStateReader
        curvatureState: ControlsState.LateralCurvatureState | ControlsState.LateralCurvatureStateBuilder | ControlsState.LateralCurvatureStateReader
        @staticmethod
        def from_dict(dictionary: dict) -> ControlsState.LateralControlStateBuilder: ...
        def copy(self) -> ControlsState.LateralControlStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ControlsState.LateralControlStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    AudibleAlert = Literal[
        "none",
        "engage",
        "disengage",
        "refuse",
        "warningSoft",
        "warningImmediate",
        "prompt",
        "promptRepeat",
        "promptDistracted",
    ]
    vEgoDEPRECATED: float
    aEgoDEPRECATED: float
    vPid: float
    vTargetLead: float
    upAccelCmd: float
    uiAccelCmd: float
    yActualDEPRECATED: float
    yDesDEPRECATED: float
    upSteerDEPRECATED: float
    uiSteerDEPRECATED: float
    aTargetMinDEPRECATED: float
    aTargetMaxDEPRECATED: float
    jerkFactorDEPRECATED: float
    angleSteersDEPRECATED: float
    hudLeadDEPRECATED: int
    cumLagMs: float
    canMonoTimeDEPRECATED: int
    radarStateMonoTimeDEPRECATED: int
    mdMonoTimeDEPRECATED: int
    enabled: bool
    steerOverrideDEPRECATED: bool
    canMonoTimesDEPRECATED: Sequence[int]
    vCruise: float
    rearViewCamDEPRECATED: bool
    alertText1: str
    alertText2: str
    awarenessStatusDEPRECATED: float
    angleModelBiasDEPRECATED: float
    longitudinalPlanMonoTime: int
    steeringAngleDesiredDegDEPRECATED: float
    longControlState: ControlsState.LongControlState
    state: ControlsState.OpenpilotState
    vEgoRawDEPRECATED: float
    ufAccelCmd: float
    ufSteerDEPRECATED: float
    aTarget: float
    active: bool
    curvature: float
    alertStatus: ControlsState.AlertStatus
    alertSize: ControlsState.AlertSize
    gpsPlannerActiveDEPRECATED: bool
    engageable: bool
    alertBlinkingRate: float
    driverMonitoringOnDEPRECATED: bool
    alertType: str
    alertSoundDEPRECATED: str
    vCurvatureDEPRECATED: float
    decelForTurnDEPRECATED: bool
    startMonoTime: int
    mapValidDEPRECATED: bool
    lateralPlanMonoTime: int
    forceDecel: bool
    lateralControlState: ControlsState.LateralControlState | ControlsState.LateralControlStateBuilder | ControlsState.LateralControlStateReader
    decelForModelDEPRECATED: bool
    alertSound: ControlsState.AudibleAlert
    canErrorCounter: int
    desiredCurvature: float
    desiredCurvatureRate: float
    vCruiseCluster: float
    experimentalMode: bool
    def init(self, name: Literal["lateralControlState"]) -> LateralControlState: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ControlsStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ControlsStateReader: ...
    @staticmethod
    def new_message() -> ControlsStateBuilder: ...
    def to_dict(self) -> dict: ...

class ControlsStateReader(ControlsState):
    lateralControlState: ControlsState.LateralControlStateReader
    def as_builder(self) -> ControlsStateBuilder: ...

class ControlsStateBuilder(ControlsState):
    lateralControlState: ControlsState.LateralControlState | ControlsState.LateralControlStateBuilder | ControlsState.LateralControlStateReader
    @staticmethod
    def from_dict(dictionary: dict) -> ControlsStateBuilder: ...
    def copy(self) -> ControlsStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ControlsStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class XYZTData:
    x: Sequence[float]
    y: Sequence[float]
    z: Sequence[float]
    t: Sequence[float]
    xStd: Sequence[float]
    yStd: Sequence[float]
    zStd: Sequence[float]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[XYZTDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> XYZTDataReader: ...
    @staticmethod
    def new_message() -> XYZTDataBuilder: ...
    def to_dict(self) -> dict: ...

class XYZTDataReader(XYZTData):
    def as_builder(self) -> XYZTDataBuilder: ...

class XYZTDataBuilder(XYZTData):
    @staticmethod
    def from_dict(dictionary: dict) -> XYZTDataBuilder: ...
    def copy(self) -> XYZTDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> XYZTDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class ModelDataV2:
    class LeadDataV2:
        prob: float
        t: float
        xyva: Sequence[float]
        xyvaStd: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ModelDataV2.LeadDataV2Reader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ModelDataV2.LeadDataV2Reader: ...
        @staticmethod
        def new_message() -> ModelDataV2.LeadDataV2Builder: ...
        def to_dict(self) -> dict: ...

    class LeadDataV2Reader(ModelDataV2.LeadDataV2):
        def as_builder(self) -> ModelDataV2.LeadDataV2Builder: ...

    class LeadDataV2Builder(ModelDataV2.LeadDataV2):
        @staticmethod
        def from_dict(dictionary: dict) -> ModelDataV2.LeadDataV2Builder: ...
        def copy(self) -> ModelDataV2.LeadDataV2Builder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ModelDataV2.LeadDataV2Reader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class DisengagePredictions:
        t: Sequence[float]
        brakeDisengageProbs: Sequence[float]
        gasDisengageProbs: Sequence[float]
        steerOverrideProbs: Sequence[float]
        brake3MetersPerSecondSquaredProbs: Sequence[float]
        brake4MetersPerSecondSquaredProbs: Sequence[float]
        brake5MetersPerSecondSquaredProbs: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ModelDataV2.DisengagePredictionsReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ModelDataV2.DisengagePredictionsReader: ...
        @staticmethod
        def new_message() -> ModelDataV2.DisengagePredictionsBuilder: ...
        def to_dict(self) -> dict: ...

    class DisengagePredictionsReader(ModelDataV2.DisengagePredictions):
        def as_builder(self) -> ModelDataV2.DisengagePredictionsBuilder: ...

    class DisengagePredictionsBuilder(ModelDataV2.DisengagePredictions):
        @staticmethod
        def from_dict(dictionary: dict) -> ModelDataV2.DisengagePredictionsBuilder: ...
        def copy(self) -> ModelDataV2.DisengagePredictionsBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ModelDataV2.DisengagePredictionsReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class MetaData:
        engagedProb: float
        desirePrediction: Sequence[float]
        brakeDisengageProbDEPRECATED: float
        gasDisengageProbDEPRECATED: float
        steerOverrideProbDEPRECATED: float
        desireState: Sequence[float]
        disengagePredictions: ModelDataV2.DisengagePredictions | ModelDataV2.DisengagePredictionsBuilder | ModelDataV2.DisengagePredictionsReader
        hardBrakePredicted: bool
        def init(self, name: Literal["disengagePredictions"]) -> ModelDataV2.DisengagePredictions: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ModelDataV2.MetaDataReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ModelDataV2.MetaDataReader: ...
        @staticmethod
        def new_message() -> ModelDataV2.MetaDataBuilder: ...
        def to_dict(self) -> dict: ...

    class MetaDataReader(ModelDataV2.MetaData):
        disengagePredictions: ModelDataV2.DisengagePredictionsReader
        def as_builder(self) -> ModelDataV2.MetaDataBuilder: ...

    class MetaDataBuilder(ModelDataV2.MetaData):
        disengagePredictions: ModelDataV2.DisengagePredictions | ModelDataV2.DisengagePredictionsBuilder | ModelDataV2.DisengagePredictionsReader
        @staticmethod
        def from_dict(dictionary: dict) -> ModelDataV2.MetaDataBuilder: ...
        def copy(self) -> ModelDataV2.MetaDataBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ModelDataV2.MetaDataReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class LeadDataV3:
        prob: float
        probTime: float
        t: Sequence[float]
        x: Sequence[float]
        xStd: Sequence[float]
        y: Sequence[float]
        yStd: Sequence[float]
        v: Sequence[float]
        vStd: Sequence[float]
        a: Sequence[float]
        aStd: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ModelDataV2.LeadDataV3Reader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ModelDataV2.LeadDataV3Reader: ...
        @staticmethod
        def new_message() -> ModelDataV2.LeadDataV3Builder: ...
        def to_dict(self) -> dict: ...

    class LeadDataV3Reader(ModelDataV2.LeadDataV3):
        def as_builder(self) -> ModelDataV2.LeadDataV3Builder: ...

    class LeadDataV3Builder(ModelDataV2.LeadDataV3):
        @staticmethod
        def from_dict(dictionary: dict) -> ModelDataV2.LeadDataV3Builder: ...
        def copy(self) -> ModelDataV2.LeadDataV3Builder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ModelDataV2.LeadDataV3Reader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Pose:
        trans: Sequence[float]
        rot: Sequence[float]
        transStd: Sequence[float]
        rotStd: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ModelDataV2.PoseReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ModelDataV2.PoseReader: ...
        @staticmethod
        def new_message() -> ModelDataV2.PoseBuilder: ...
        def to_dict(self) -> dict: ...

    class PoseReader(ModelDataV2.Pose):
        def as_builder(self) -> ModelDataV2.PoseBuilder: ...

    class PoseBuilder(ModelDataV2.Pose):
        @staticmethod
        def from_dict(dictionary: dict) -> ModelDataV2.PoseBuilder: ...
        def copy(self) -> ModelDataV2.PoseBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ModelDataV2.PoseReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    ConfidenceClass = Literal["red", "yellow", "green"]
    frameId: int
    frameAge: int
    frameDropPerc: float
    timestampEof: int
    position: XYZTData | XYZTDataBuilder | XYZTDataReader
    orientation: XYZTData | XYZTDataBuilder | XYZTDataReader
    velocity: XYZTData | XYZTDataBuilder | XYZTDataReader
    orientationRate: XYZTData | XYZTDataBuilder | XYZTDataReader
    laneLines: Sequence[XYZTData | XYZTDataBuilder | XYZTDataReader]
    laneLineProbs: Sequence[float]
    roadEdges: Sequence[XYZTData | XYZTDataBuilder | XYZTDataReader]
    leads: Sequence[ModelDataV2.LeadDataV2 | ModelDataV2.LeadDataV2Builder | ModelDataV2.LeadDataV2Reader]
    meta: ModelDataV2.MetaData | ModelDataV2.MetaDataBuilder | ModelDataV2.MetaDataReader
    laneLineStds: Sequence[float]
    roadEdgeStds: Sequence[float]
    modelExecutionTime: float
    rawPredictions: bytes
    gpuExecutionTime: float
    leadsV3: Sequence[ModelDataV2.LeadDataV3 | ModelDataV2.LeadDataV3Builder | ModelDataV2.LeadDataV3Reader]
    acceleration: XYZTData | XYZTDataBuilder | XYZTDataReader
    frameIdExtra: int
    temporalPose: ModelDataV2.Pose | ModelDataV2.PoseBuilder | ModelDataV2.PoseReader
    navEnabled: bool
    confidence: ModelDataV2.ConfidenceClass
    locationMonoTime: int
    @overload
    def init(self, name: Literal["position"]) -> XYZTData: ...
    @overload
    def init(self, name: Literal["orientation"]) -> XYZTData: ...
    @overload
    def init(self, name: Literal["velocity"]) -> XYZTData: ...
    @overload
    def init(self, name: Literal["orientationRate"]) -> XYZTData: ...
    @overload
    def init(self, name: Literal["meta"]) -> ModelDataV2.MetaData: ...
    @overload
    def init(self, name: Literal["acceleration"]) -> XYZTData: ...
    @overload
    def init(self, name: Literal["temporalPose"]) -> ModelDataV2.Pose: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ModelDataV2Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ModelDataV2Reader: ...
    @staticmethod
    def new_message() -> ModelDataV2Builder: ...
    def to_dict(self) -> dict: ...

class ModelDataV2Reader(ModelDataV2):
    position: XYZTDataReader
    orientation: XYZTDataReader
    velocity: XYZTDataReader
    orientationRate: XYZTDataReader
    laneLines: Sequence[XYZTDataReader]
    roadEdges: Sequence[XYZTDataReader]
    leads: Sequence[ModelDataV2.LeadDataV2Reader]
    meta: ModelDataV2.MetaDataReader
    leadsV3: Sequence[ModelDataV2.LeadDataV3Reader]
    acceleration: XYZTDataReader
    temporalPose: ModelDataV2.PoseReader
    def as_builder(self) -> ModelDataV2Builder: ...

class ModelDataV2Builder(ModelDataV2):
    position: XYZTData | XYZTDataBuilder | XYZTDataReader
    orientation: XYZTData | XYZTDataBuilder | XYZTDataReader
    velocity: XYZTData | XYZTDataBuilder | XYZTDataReader
    orientationRate: XYZTData | XYZTDataBuilder | XYZTDataReader
    laneLines: Sequence[XYZTData | XYZTDataBuilder | XYZTDataReader]
    roadEdges: Sequence[XYZTData | XYZTDataBuilder | XYZTDataReader]
    leads: Sequence[ModelDataV2.LeadDataV2 | ModelDataV2.LeadDataV2Builder | ModelDataV2.LeadDataV2Reader]
    meta: ModelDataV2.MetaData | ModelDataV2.MetaDataBuilder | ModelDataV2.MetaDataReader
    leadsV3: Sequence[ModelDataV2.LeadDataV3 | ModelDataV2.LeadDataV3Builder | ModelDataV2.LeadDataV3Reader]
    acceleration: XYZTData | XYZTDataBuilder | XYZTDataReader
    temporalPose: ModelDataV2.Pose | ModelDataV2.PoseBuilder | ModelDataV2.PoseReader
    @staticmethod
    def from_dict(dictionary: dict) -> ModelDataV2Builder: ...
    def copy(self) -> ModelDataV2Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ModelDataV2Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class EncodeIndex:
    Type = Literal[
        "bigBoxLossless",
        "fullHEVC",
        "bigBoxHEVCDEPRECATED",
        "chffrAndroidH264DEPRECATED",
        "fullLosslessClipDEPRECATED",
        "frontDEPRECATED",
        "qcameraH264",
        "livestreamH264",
    ]
    frameId: int
    type: EncodeIndex.Type
    encodeId: int
    segmentNum: int
    segmentId: int
    segmentIdEncode: int
    timestampSof: int
    timestampEof: int
    flags: int
    len: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[EncodeIndexReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> EncodeIndexReader: ...
    @staticmethod
    def new_message() -> EncodeIndexBuilder: ...
    def to_dict(self) -> dict: ...

class EncodeIndexReader(EncodeIndex):
    def as_builder(self) -> EncodeIndexBuilder: ...

class EncodeIndexBuilder(EncodeIndex):
    @staticmethod
    def from_dict(dictionary: dict) -> EncodeIndexBuilder: ...
    def copy(self) -> EncodeIndexBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> EncodeIndexReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class AndroidLogEntry:
    id: int
    ts: int
    priority: int
    pid: int
    tid: int
    tag: str
    message: str
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[AndroidLogEntryReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> AndroidLogEntryReader: ...
    @staticmethod
    def new_message() -> AndroidLogEntryBuilder: ...
    def to_dict(self) -> dict: ...

class AndroidLogEntryReader(AndroidLogEntry):
    def as_builder(self) -> AndroidLogEntryBuilder: ...

class AndroidLogEntryBuilder(AndroidLogEntry):
    @staticmethod
    def from_dict(dictionary: dict) -> AndroidLogEntryBuilder: ...
    def copy(self) -> AndroidLogEntryBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> AndroidLogEntryReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LongitudinalPlan:
    class GpsTrajectory:
        x: Sequence[float]
        y: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[LongitudinalPlan.GpsTrajectoryReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> LongitudinalPlan.GpsTrajectoryReader: ...
        @staticmethod
        def new_message() -> LongitudinalPlan.GpsTrajectoryBuilder: ...
        def to_dict(self) -> dict: ...

    class GpsTrajectoryReader(LongitudinalPlan.GpsTrajectory):
        def as_builder(self) -> LongitudinalPlan.GpsTrajectoryBuilder: ...

    class GpsTrajectoryBuilder(LongitudinalPlan.GpsTrajectory):
        @staticmethod
        def from_dict(dictionary: dict) -> LongitudinalPlan.GpsTrajectoryBuilder: ...
        def copy(self) -> LongitudinalPlan.GpsTrajectoryBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> LongitudinalPlan.GpsTrajectoryReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    LongitudinalPlanSource = Literal["cruise", "lead0", "lead1", "lead2", "e2e"]
    lateralValidDEPRECATED: bool
    dPolyDEPRECATED: Sequence[float]
    longitudinalValidDEPRECATED: bool
    vTargetDEPRECATED: float
    aTargetMinDEPRECATED: float
    aTargetMaxDEPRECATED: float
    jerkFactorDEPRECATED: float
    hasLead: bool
    fcw: bool
    modelMonoTime: int
    radarStateMonoTimeDEPRECATED: int
    laneWidthDEPRECATED: float
    gpsTrajectoryDEPRECATED: LongitudinalPlan.GpsTrajectory | LongitudinalPlan.GpsTrajectoryBuilder | LongitudinalPlan.GpsTrajectoryReader
    eventsDEPRECATED: Sequence[CarEvent | CarEventBuilder | CarEventReader]
    vTargetFutureDEPRECATED: float
    longitudinalPlanSource: LongitudinalPlan.LongitudinalPlanSource
    vCruiseDEPRECATED: float
    aCruiseDEPRECATED: float
    aTargetDEPRECATED: float
    gpsPlannerActiveDEPRECATED: bool
    vMaxDEPRECATED: float
    vCurvatureDEPRECATED: float
    decelForTurnDEPRECATED: bool
    hasLeftLaneDEPRECATED: bool
    hasRightLaneDEPRECATED: bool
    mapValidDEPRECATED: bool
    vStartDEPRECATED: float
    aStartDEPRECATED: float
    radarValidDEPRECATED: bool
    processingDelay: float
    radarCanErrorDEPRECATED: bool
    commIssueDEPRECATED: bool
    accels: Sequence[float]
    speeds: Sequence[float]
    jerks: Sequence[float]
    solverExecutionTime: float
    personality: LongitudinalPersonality
    def init(self, name: Literal["gpsTrajectoryDEPRECATED"]) -> LongitudinalPlan.GpsTrajectory: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LongitudinalPlanReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LongitudinalPlanReader: ...
    @staticmethod
    def new_message() -> LongitudinalPlanBuilder: ...
    def to_dict(self) -> dict: ...

class LongitudinalPlanReader(LongitudinalPlan):
    gpsTrajectoryDEPRECATED: LongitudinalPlan.GpsTrajectoryReader
    eventsDEPRECATED: Sequence[CarEventReader]
    def as_builder(self) -> LongitudinalPlanBuilder: ...

class LongitudinalPlanBuilder(LongitudinalPlan):
    gpsTrajectoryDEPRECATED: LongitudinalPlan.GpsTrajectory | LongitudinalPlan.GpsTrajectoryBuilder | LongitudinalPlan.GpsTrajectoryReader
    eventsDEPRECATED: Sequence[CarEvent | CarEventBuilder | CarEventReader]
    @staticmethod
    def from_dict(dictionary: dict) -> LongitudinalPlanBuilder: ...
    def copy(self) -> LongitudinalPlanBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LongitudinalPlanReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class UiPlan:
    position: XYZTData | XYZTDataBuilder | XYZTDataReader
    accel: Sequence[float]
    frameId: int
    def init(self, name: Literal["position"]) -> XYZTData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[UiPlanReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> UiPlanReader: ...
    @staticmethod
    def new_message() -> UiPlanBuilder: ...
    def to_dict(self) -> dict: ...

class UiPlanReader(UiPlan):
    position: XYZTDataReader
    def as_builder(self) -> UiPlanBuilder: ...

class UiPlanBuilder(UiPlan):
    position: XYZTData | XYZTDataBuilder | XYZTDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> UiPlanBuilder: ...
    def copy(self) -> UiPlanBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> UiPlanReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LateralPlan:
    Desire = Literal["none", "turnLeft", "turnRight", "laneChangeLeft", "laneChangeRight", "keepLeft", "keepRight"]
    LaneChangeState = Literal["off", "preLaneChange", "laneChangeStarting", "laneChangeFinishing"]
    LaneChangeDirection = Literal["none", "left", "right"]

    class SolverState:
        x: Sequence[Sequence[float]]
        u: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[LateralPlan.SolverStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> LateralPlan.SolverStateReader: ...
        @staticmethod
        def new_message() -> LateralPlan.SolverStateBuilder: ...
        def to_dict(self) -> dict: ...

    class SolverStateReader(LateralPlan.SolverState):
        def as_builder(self) -> LateralPlan.SolverStateBuilder: ...

    class SolverStateBuilder(LateralPlan.SolverState):
        @staticmethod
        def from_dict(dictionary: dict) -> LateralPlan.SolverStateBuilder: ...
        def copy(self) -> LateralPlan.SolverStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> LateralPlan.SolverStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    laneWidthDEPRECATED: float
    dPolyDEPRECATED: Sequence[float]
    cPolyDEPRECATED: Sequence[float]
    cProbDEPRECATED: float
    lPolyDEPRECATED: Sequence[float]
    lProbDEPRECATED: float
    rPolyDEPRECATED: Sequence[float]
    rProbDEPRECATED: float
    steeringAngleDegDEPRECATED: float
    mpcSolutionValid: bool
    paramsValidDEPRECATED: bool
    angleOffsetDegDEPRECATED: float
    modelValidDEPRECATED: bool
    steeringRateDegDEPRECATED: float
    sensorValidDEPRECATED: bool
    commIssueDEPRECATED: bool
    posenetValidDEPRECATED: bool
    desire: LateralPlan.Desire
    laneChangeState: LateralPlan.LaneChangeState
    laneChangeDirection: LateralPlan.LaneChangeDirection
    dPathPoints: Sequence[float]
    dProbDEPRECATED: float
    curvatureDEPRECATED: float
    curvatureRateDEPRECATED: float
    rawCurvatureDEPRECATED: float
    rawCurvatureRateDEPRECATED: float
    psis: Sequence[float]
    curvatures: Sequence[float]
    curvatureRates: Sequence[float]
    useLaneLines: bool
    solverExecutionTime: float
    modelMonoTime: int
    solverCost: float
    solverState: LateralPlan.SolverState | LateralPlan.SolverStateBuilder | LateralPlan.SolverStateReader
    def init(self, name: Literal["solverState"]) -> LateralPlan.SolverState: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LateralPlanReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LateralPlanReader: ...
    @staticmethod
    def new_message() -> LateralPlanBuilder: ...
    def to_dict(self) -> dict: ...

class LateralPlanReader(LateralPlan):
    solverState: LateralPlan.SolverStateReader
    def as_builder(self) -> LateralPlanBuilder: ...

class LateralPlanBuilder(LateralPlan):
    solverState: LateralPlan.SolverState | LateralPlan.SolverStateBuilder | LateralPlan.SolverStateReader
    @staticmethod
    def from_dict(dictionary: dict) -> LateralPlanBuilder: ...
    def copy(self) -> LateralPlanBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LateralPlanReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveLocationKalman:
    class Measurement:
        value: Sequence[float]
        std: Sequence[float]
        valid: bool
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[LiveLocationKalman.MeasurementReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> LiveLocationKalman.MeasurementReader: ...
        @staticmethod
        def new_message() -> LiveLocationKalman.MeasurementBuilder: ...
        def to_dict(self) -> dict: ...

    class MeasurementReader(LiveLocationKalman.Measurement):
        def as_builder(self) -> LiveLocationKalman.MeasurementBuilder: ...

    class MeasurementBuilder(LiveLocationKalman.Measurement):
        @staticmethod
        def from_dict(dictionary: dict) -> LiveLocationKalman.MeasurementBuilder: ...
        def copy(self) -> LiveLocationKalman.MeasurementBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> LiveLocationKalman.MeasurementReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    Status = Literal["uninitialized", "uncalibrated", "valid"]
    positionECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    positionGeodetic: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityNED: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityDevice: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    accelerationDevice: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    orientationECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    orientationNED: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    angularVelocityDevice: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    calibratedOrientationNED: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityCalibrated: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    accelerationCalibrated: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    angularVelocityCalibrated: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    gpsWeek: int
    gpsTimeOfWeek: float
    status: LiveLocationKalman.Status
    unixTimestampMillis: int
    inputsOK: bool
    posenetOK: bool
    gpsOK: bool
    calibratedOrientationECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    sensorsOK: bool
    deviceStable: bool
    timeSinceReset: float
    excessiveResets: bool
    timeToFirstFix: float
    filterState: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    @overload
    def init(self, name: Literal["positionECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["positionGeodetic"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["velocityECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["velocityNED"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["velocityDevice"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["accelerationDevice"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["orientationECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["orientationNED"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["angularVelocityDevice"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["calibratedOrientationNED"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["velocityCalibrated"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["accelerationCalibrated"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["angularVelocityCalibrated"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["calibratedOrientationECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["filterState"]) -> LiveLocationKalman.Measurement: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveLocationKalmanReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveLocationKalmanReader: ...
    @staticmethod
    def new_message() -> LiveLocationKalmanBuilder: ...
    def to_dict(self) -> dict: ...

class LiveLocationKalmanReader(LiveLocationKalman):
    positionECEF: LiveLocationKalman.MeasurementReader
    positionGeodetic: LiveLocationKalman.MeasurementReader
    velocityECEF: LiveLocationKalman.MeasurementReader
    velocityNED: LiveLocationKalman.MeasurementReader
    velocityDevice: LiveLocationKalman.MeasurementReader
    accelerationDevice: LiveLocationKalman.MeasurementReader
    orientationECEF: LiveLocationKalman.MeasurementReader
    orientationNED: LiveLocationKalman.MeasurementReader
    angularVelocityDevice: LiveLocationKalman.MeasurementReader
    calibratedOrientationNED: LiveLocationKalman.MeasurementReader
    velocityCalibrated: LiveLocationKalman.MeasurementReader
    accelerationCalibrated: LiveLocationKalman.MeasurementReader
    angularVelocityCalibrated: LiveLocationKalman.MeasurementReader
    calibratedOrientationECEF: LiveLocationKalman.MeasurementReader
    filterState: LiveLocationKalman.MeasurementReader
    def as_builder(self) -> LiveLocationKalmanBuilder: ...

class LiveLocationKalmanBuilder(LiveLocationKalman):
    positionECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    positionGeodetic: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityNED: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityDevice: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    accelerationDevice: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    orientationECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    orientationNED: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    angularVelocityDevice: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    calibratedOrientationNED: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityCalibrated: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    accelerationCalibrated: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    angularVelocityCalibrated: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    calibratedOrientationECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    filterState: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    @staticmethod
    def from_dict(dictionary: dict) -> LiveLocationKalmanBuilder: ...
    def copy(self) -> LiveLocationKalmanBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveLocationKalmanReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class ProcLog:
    class CPUTimes:
        cpuNum: int
        user: float
        nice: float
        system: float
        idle: float
        iowait: float
        irq: float
        softirq: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ProcLog.CPUTimesReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ProcLog.CPUTimesReader: ...
        @staticmethod
        def new_message() -> ProcLog.CPUTimesBuilder: ...
        def to_dict(self) -> dict: ...

    class CPUTimesReader(ProcLog.CPUTimes):
        def as_builder(self) -> ProcLog.CPUTimesBuilder: ...

    class CPUTimesBuilder(ProcLog.CPUTimes):
        @staticmethod
        def from_dict(dictionary: dict) -> ProcLog.CPUTimesBuilder: ...
        def copy(self) -> ProcLog.CPUTimesBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ProcLog.CPUTimesReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Mem:
        total: int
        free: int
        available: int
        buffers: int
        cached: int
        active: int
        inactive: int
        shared: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ProcLog.MemReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ProcLog.MemReader: ...
        @staticmethod
        def new_message() -> ProcLog.MemBuilder: ...
        def to_dict(self) -> dict: ...

    class MemReader(ProcLog.Mem):
        def as_builder(self) -> ProcLog.MemBuilder: ...

    class MemBuilder(ProcLog.Mem):
        @staticmethod
        def from_dict(dictionary: dict) -> ProcLog.MemBuilder: ...
        def copy(self) -> ProcLog.MemBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ProcLog.MemReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Process:
        pid: int
        name: str
        state: int
        ppid: int
        cpuUser: float
        cpuSystem: float
        cpuChildrenUser: float
        cpuChildrenSystem: float
        priority: int
        nice: int
        numThreads: int
        startTime: float
        memVms: int
        memRss: int
        processor: int
        cmdline: Sequence[str]
        exe: str
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ProcLog.ProcessReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ProcLog.ProcessReader: ...
        @staticmethod
        def new_message() -> ProcLog.ProcessBuilder: ...
        def to_dict(self) -> dict: ...

    class ProcessReader(ProcLog.Process):
        def as_builder(self) -> ProcLog.ProcessBuilder: ...

    class ProcessBuilder(ProcLog.Process):
        @staticmethod
        def from_dict(dictionary: dict) -> ProcLog.ProcessBuilder: ...
        def copy(self) -> ProcLog.ProcessBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ProcLog.ProcessReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    cpuTimes: Sequence[ProcLog.CPUTimes | ProcLog.CPUTimesBuilder | ProcLog.CPUTimesReader]
    mem: ProcLog.Mem | ProcLog.MemBuilder | ProcLog.MemReader
    procs: Sequence[ProcLog.Process | ProcLog.ProcessBuilder | ProcLog.ProcessReader]
    def init(self, name: Literal["mem"]) -> ProcLog.Mem: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ProcLogReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ProcLogReader: ...
    @staticmethod
    def new_message() -> ProcLogBuilder: ...
    def to_dict(self) -> dict: ...

class ProcLogReader(ProcLog):
    cpuTimes: Sequence[ProcLog.CPUTimesReader]
    mem: ProcLog.MemReader
    procs: Sequence[ProcLog.ProcessReader]
    def as_builder(self) -> ProcLogBuilder: ...

class ProcLogBuilder(ProcLog):
    cpuTimes: Sequence[ProcLog.CPUTimes | ProcLog.CPUTimesBuilder | ProcLog.CPUTimesReader]
    mem: ProcLog.Mem | ProcLog.MemBuilder | ProcLog.MemReader
    procs: Sequence[ProcLog.Process | ProcLog.ProcessBuilder | ProcLog.ProcessReader]
    @staticmethod
    def from_dict(dictionary: dict) -> ProcLogBuilder: ...
    def copy(self) -> ProcLogBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ProcLogReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class GnssMeasurements:
    class EphemerisSourceDEPRECATED:
        EphemerisType = Literal["nav", "nasaUltraRapid", "glonassIacUltraRapid", "qcom"]
        type: GnssMeasurements.EphemerisSourceDEPRECATED.EphemerisType
        gpsWeek: int
        gpsTimeOfWeek: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[GnssMeasurements.EphemerisSourceDEPRECATEDReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> GnssMeasurements.EphemerisSourceDEPRECATEDReader: ...
        @staticmethod
        def new_message() -> GnssMeasurements.EphemerisSourceDEPRECATEDBuilder: ...
        def to_dict(self) -> dict: ...

    class EphemerisSourceDEPRECATEDReader(GnssMeasurements.EphemerisSourceDEPRECATED):
        def as_builder(self) -> GnssMeasurements.EphemerisSourceDEPRECATEDBuilder: ...

    class EphemerisSourceDEPRECATEDBuilder(GnssMeasurements.EphemerisSourceDEPRECATED):
        @staticmethod
        def from_dict(dictionary: dict) -> GnssMeasurements.EphemerisSourceDEPRECATEDBuilder: ...
        def copy(self) -> GnssMeasurements.EphemerisSourceDEPRECATEDBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> GnssMeasurements.EphemerisSourceDEPRECATEDReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class CorrectedMeasurement:
        ConstellationId = Literal["gps", "sbas", "galileo", "beidou", "imes", "qznss", "glonass"]
        constellationId: GnssMeasurements.CorrectedMeasurement.ConstellationId
        svId: int
        glonassFrequency: int
        pseudorange: float
        pseudorangeStd: float
        pseudorangeRate: float
        pseudorangeRateStd: float
        satPos: Sequence[float]
        satVel: Sequence[float]
        ephemerisSourceDEPRECATED: GnssMeasurements.EphemerisSourceDEPRECATED | GnssMeasurements.EphemerisSourceDEPRECATEDBuilder | GnssMeasurements.EphemerisSourceDEPRECATEDReader
        def init(self, name: Literal["ephemerisSourceDEPRECATED"]) -> GnssMeasurements.EphemerisSourceDEPRECATED: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[GnssMeasurements.CorrectedMeasurementReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> GnssMeasurements.CorrectedMeasurementReader: ...
        @staticmethod
        def new_message() -> GnssMeasurements.CorrectedMeasurementBuilder: ...
        def to_dict(self) -> dict: ...

    class CorrectedMeasurementReader(GnssMeasurements.CorrectedMeasurement):
        ephemerisSourceDEPRECATED: GnssMeasurements.EphemerisSourceDEPRECATEDReader
        def as_builder(self) -> GnssMeasurements.CorrectedMeasurementBuilder: ...

    class CorrectedMeasurementBuilder(GnssMeasurements.CorrectedMeasurement):
        ephemerisSourceDEPRECATED: GnssMeasurements.EphemerisSourceDEPRECATED | GnssMeasurements.EphemerisSourceDEPRECATEDBuilder | GnssMeasurements.EphemerisSourceDEPRECATEDReader
        @staticmethod
        def from_dict(dictionary: dict) -> GnssMeasurements.CorrectedMeasurementBuilder: ...
        def copy(self) -> GnssMeasurements.CorrectedMeasurementBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> GnssMeasurements.CorrectedMeasurementReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class EphemerisStatus:
        EphemerisSource = Literal["gnssChip", "internet", "cache", "unknown"]
        constellationId: GnssMeasurements.CorrectedMeasurement.ConstellationId
        svId: int
        type: GnssMeasurements.EphemerisSourceDEPRECATED.EphemerisType
        source: GnssMeasurements.EphemerisStatus.EphemerisSource
        gpsWeek: int
        tow: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[GnssMeasurements.EphemerisStatusReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> GnssMeasurements.EphemerisStatusReader: ...
        @staticmethod
        def new_message() -> GnssMeasurements.EphemerisStatusBuilder: ...
        def to_dict(self) -> dict: ...

    class EphemerisStatusReader(GnssMeasurements.EphemerisStatus):
        def as_builder(self) -> GnssMeasurements.EphemerisStatusBuilder: ...

    class EphemerisStatusBuilder(GnssMeasurements.EphemerisStatus):
        @staticmethod
        def from_dict(dictionary: dict) -> GnssMeasurements.EphemerisStatusBuilder: ...
        def copy(self) -> GnssMeasurements.EphemerisStatusBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> GnssMeasurements.EphemerisStatusReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    measTime: int
    gpsWeek: int
    gpsTimeOfWeek: float
    correctedMeasurements: Sequence[
        GnssMeasurements.CorrectedMeasurement
        | GnssMeasurements.CorrectedMeasurementBuilder
        | GnssMeasurements.CorrectedMeasurementReader
    ]
    kalmanPositionECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    kalmanVelocityECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    positionECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    timeToFirstFix: float
    ephemerisStatuses: Sequence[
        GnssMeasurements.EphemerisStatus
        | GnssMeasurements.EphemerisStatusBuilder
        | GnssMeasurements.EphemerisStatusReader
    ]
    @overload
    def init(self, name: Literal["kalmanPositionECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["kalmanVelocityECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["positionECEF"]) -> LiveLocationKalman.Measurement: ...
    @overload
    def init(self, name: Literal["velocityECEF"]) -> LiveLocationKalman.Measurement: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[GnssMeasurementsReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> GnssMeasurementsReader: ...
    @staticmethod
    def new_message() -> GnssMeasurementsBuilder: ...
    def to_dict(self) -> dict: ...

class GnssMeasurementsReader(GnssMeasurements):
    correctedMeasurements: Sequence[GnssMeasurements.CorrectedMeasurementReader]
    kalmanPositionECEF: LiveLocationKalman.MeasurementReader
    kalmanVelocityECEF: LiveLocationKalman.MeasurementReader
    positionECEF: LiveLocationKalman.MeasurementReader
    velocityECEF: LiveLocationKalman.MeasurementReader
    ephemerisStatuses: Sequence[GnssMeasurements.EphemerisStatusReader]
    def as_builder(self) -> GnssMeasurementsBuilder: ...

class GnssMeasurementsBuilder(GnssMeasurements):
    correctedMeasurements: Sequence[
        GnssMeasurements.CorrectedMeasurement
        | GnssMeasurements.CorrectedMeasurementBuilder
        | GnssMeasurements.CorrectedMeasurementReader
    ]
    kalmanPositionECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    kalmanVelocityECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    positionECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    velocityECEF: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    ephemerisStatuses: Sequence[
        GnssMeasurements.EphemerisStatus
        | GnssMeasurements.EphemerisStatusBuilder
        | GnssMeasurements.EphemerisStatusReader
    ]
    @staticmethod
    def from_dict(dictionary: dict) -> GnssMeasurementsBuilder: ...
    def copy(self) -> GnssMeasurementsBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> GnssMeasurementsReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class UbloxGnss:
    class MeasurementReport:
        class ReceiverStatus:
            leapSecValid: bool
            clkReset: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[UbloxGnss.MeasurementReport.ReceiverStatusReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> UbloxGnss.MeasurementReport.ReceiverStatusReader: ...
            @staticmethod
            def new_message() -> UbloxGnss.MeasurementReport.ReceiverStatusBuilder: ...
            def to_dict(self) -> dict: ...

        class ReceiverStatusReader(UbloxGnss.MeasurementReport.ReceiverStatus):
            def as_builder(self) -> UbloxGnss.MeasurementReport.ReceiverStatusBuilder: ...

        class ReceiverStatusBuilder(UbloxGnss.MeasurementReport.ReceiverStatus):
            @staticmethod
            def from_dict(dictionary: dict) -> UbloxGnss.MeasurementReport.ReceiverStatusBuilder: ...
            def copy(self) -> UbloxGnss.MeasurementReport.ReceiverStatusBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> UbloxGnss.MeasurementReport.ReceiverStatusReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...

        class Measurement:
            class TrackingStatus:
                pseudorangeValid: bool
                carrierPhaseValid: bool
                halfCycleValid: bool
                halfCycleSubtracted: bool
                @staticmethod
                @contextmanager
                def from_bytes(
                    data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
                ) -> Iterator[UbloxGnss.MeasurementReport.Measurement.TrackingStatusReader]: ...
                @staticmethod
                def from_bytes_packed(
                    data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
                ) -> UbloxGnss.MeasurementReport.Measurement.TrackingStatusReader: ...
                @staticmethod
                def new_message() -> UbloxGnss.MeasurementReport.Measurement.TrackingStatusBuilder: ...
                def to_dict(self) -> dict: ...

            class TrackingStatusReader(UbloxGnss.MeasurementReport.Measurement.TrackingStatus):
                def as_builder(self) -> UbloxGnss.MeasurementReport.Measurement.TrackingStatusBuilder: ...

            class TrackingStatusBuilder(UbloxGnss.MeasurementReport.Measurement.TrackingStatus):
                @staticmethod
                def from_dict(dictionary: dict) -> UbloxGnss.MeasurementReport.Measurement.TrackingStatusBuilder: ...
                def copy(self) -> UbloxGnss.MeasurementReport.Measurement.TrackingStatusBuilder: ...
                def to_bytes(self) -> bytes: ...
                def to_bytes_packed(self) -> bytes: ...
                def to_segments(self) -> list[bytes]: ...
                def as_reader(self) -> UbloxGnss.MeasurementReport.Measurement.TrackingStatusReader: ...
                @staticmethod
                def write(file: BufferedWriter) -> None: ...
                @staticmethod
                def write_packed(file: BufferedWriter) -> None: ...
            svId: int
            trackingStatus: UbloxGnss.MeasurementReport.Measurement.TrackingStatus | UbloxGnss.MeasurementReport.Measurement.TrackingStatusBuilder | UbloxGnss.MeasurementReport.Measurement.TrackingStatusReader
            pseudorange: float
            carrierCycles: float
            doppler: float
            gnssId: int
            glonassFrequencyIndex: int
            locktime: int
            cno: int
            pseudorangeStdev: float
            carrierPhaseStdev: float
            dopplerStdev: float
            sigId: int
            def init(
                self, name: Literal["trackingStatus"]
            ) -> UbloxGnss.MeasurementReport.Measurement.TrackingStatus: ...
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[UbloxGnss.MeasurementReport.MeasurementReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> UbloxGnss.MeasurementReport.MeasurementReader: ...
            @staticmethod
            def new_message() -> UbloxGnss.MeasurementReport.MeasurementBuilder: ...
            def to_dict(self) -> dict: ...

        class MeasurementReader(UbloxGnss.MeasurementReport.Measurement):
            trackingStatus: UbloxGnss.MeasurementReport.Measurement.TrackingStatusReader
            def as_builder(self) -> UbloxGnss.MeasurementReport.MeasurementBuilder: ...

        class MeasurementBuilder(UbloxGnss.MeasurementReport.Measurement):
            trackingStatus: UbloxGnss.MeasurementReport.Measurement.TrackingStatus | UbloxGnss.MeasurementReport.Measurement.TrackingStatusBuilder | UbloxGnss.MeasurementReport.Measurement.TrackingStatusReader
            @staticmethod
            def from_dict(dictionary: dict) -> UbloxGnss.MeasurementReport.MeasurementBuilder: ...
            def copy(self) -> UbloxGnss.MeasurementReport.MeasurementBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> UbloxGnss.MeasurementReport.MeasurementReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...
        rcvTow: float
        gpsWeek: int
        leapSeconds: int
        receiverStatus: UbloxGnss.MeasurementReport.ReceiverStatus | UbloxGnss.MeasurementReport.ReceiverStatusBuilder | UbloxGnss.MeasurementReport.ReceiverStatusReader
        numMeas: int
        measurements: Sequence[
            UbloxGnss.MeasurementReport.Measurement
            | UbloxGnss.MeasurementReport.MeasurementBuilder
            | UbloxGnss.MeasurementReport.MeasurementReader
        ]
        def init(self, name: Literal["receiverStatus"]) -> UbloxGnss.MeasurementReport.ReceiverStatus: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.MeasurementReportReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.MeasurementReportReader: ...
        @staticmethod
        def new_message() -> UbloxGnss.MeasurementReportBuilder: ...
        def to_dict(self) -> dict: ...

    class MeasurementReportReader(UbloxGnss.MeasurementReport):
        receiverStatus: UbloxGnss.MeasurementReport.ReceiverStatusReader
        measurements: Sequence[UbloxGnss.MeasurementReport.MeasurementReader]
        def as_builder(self) -> UbloxGnss.MeasurementReportBuilder: ...

    class MeasurementReportBuilder(UbloxGnss.MeasurementReport):
        receiverStatus: UbloxGnss.MeasurementReport.ReceiverStatus | UbloxGnss.MeasurementReport.ReceiverStatusBuilder | UbloxGnss.MeasurementReport.ReceiverStatusReader
        measurements: Sequence[
            UbloxGnss.MeasurementReport.Measurement
            | UbloxGnss.MeasurementReport.MeasurementBuilder
            | UbloxGnss.MeasurementReport.MeasurementReader
        ]
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.MeasurementReportBuilder: ...
        def copy(self) -> UbloxGnss.MeasurementReportBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.MeasurementReportReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Ephemeris:
        svId: int
        year: int
        month: int
        day: int
        hour: int
        minute: int
        second: float
        af0: float
        af1: float
        af2: float
        iode: float
        crs: float
        deltaN: float
        m0: float
        cuc: float
        ecc: float
        cus: float
        a: float
        toe: float
        cic: float
        omega0: float
        cis: float
        i0: float
        crc: float
        omega: float
        omegaDot: float
        iDot: float
        codesL2: float
        gpsWeekDEPRECATED: float
        l2: float
        svAcc: float
        svHealth: float
        tgd: float
        iodc: float
        transmissionTime: float
        fitInterval: float
        toc: float
        ionoCoeffsValid: bool
        ionoAlpha: Sequence[float]
        ionoBeta: Sequence[float]
        towCount: int
        toeWeek: int
        tocWeek: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.EphemerisReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.EphemerisReader: ...
        @staticmethod
        def new_message() -> UbloxGnss.EphemerisBuilder: ...
        def to_dict(self) -> dict: ...

    class EphemerisReader(UbloxGnss.Ephemeris):
        def as_builder(self) -> UbloxGnss.EphemerisBuilder: ...

    class EphemerisBuilder(UbloxGnss.Ephemeris):
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.EphemerisBuilder: ...
        def copy(self) -> UbloxGnss.EphemerisBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.EphemerisReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class IonoData:
        svHealth: int
        tow: float
        gpsWeek: float
        ionoAlpha: Sequence[float]
        ionoBeta: Sequence[float]
        healthValid: bool
        ionoCoeffsValid: bool
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.IonoDataReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.IonoDataReader: ...
        @staticmethod
        def new_message() -> UbloxGnss.IonoDataBuilder: ...
        def to_dict(self) -> dict: ...

    class IonoDataReader(UbloxGnss.IonoData):
        def as_builder(self) -> UbloxGnss.IonoDataBuilder: ...

    class IonoDataBuilder(UbloxGnss.IonoData):
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.IonoDataBuilder: ...
        def copy(self) -> UbloxGnss.IonoDataBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.IonoDataReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class HwStatus:
        AntennaSupervisorState = Literal["init", "dontknow", "ok", "short", "open"]
        AntennaPowerStatus = Literal["off", "on", "dontknow"]
        noisePerMS: int
        agcCnt: int
        aStatus: UbloxGnss.HwStatus.AntennaSupervisorState
        aPower: UbloxGnss.HwStatus.AntennaPowerStatus
        jamInd: int
        flags: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.HwStatusReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.HwStatusReader: ...
        @staticmethod
        def new_message() -> UbloxGnss.HwStatusBuilder: ...
        def to_dict(self) -> dict: ...

    class HwStatusReader(UbloxGnss.HwStatus):
        def as_builder(self) -> UbloxGnss.HwStatusBuilder: ...

    class HwStatusBuilder(UbloxGnss.HwStatus):
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.HwStatusBuilder: ...
        def copy(self) -> UbloxGnss.HwStatusBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.HwStatusReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class HwStatus2:
        ConfigSource = Literal["undefined", "rom", "otp", "configpins", "flash"]
        ofsI: int
        magI: int
        ofsQ: int
        magQ: int
        cfgSource: UbloxGnss.HwStatus2.ConfigSource
        lowLevCfg: int
        postStatus: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.HwStatus2Reader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.HwStatus2Reader: ...
        @staticmethod
        def new_message() -> UbloxGnss.HwStatus2Builder: ...
        def to_dict(self) -> dict: ...

    class HwStatus2Reader(UbloxGnss.HwStatus2):
        def as_builder(self) -> UbloxGnss.HwStatus2Builder: ...

    class HwStatus2Builder(UbloxGnss.HwStatus2):
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.HwStatus2Builder: ...
        def copy(self) -> UbloxGnss.HwStatus2Builder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.HwStatus2Reader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class GlonassEphemeris:
        svId: int
        year: int
        dayInYear: int
        hour: int
        minute: int
        second: float
        x: float
        xVel: float
        xAccel: float
        y: float
        yVel: float
        yAccel: float
        z: float
        zVel: float
        zAccel: float
        svType: int
        svURA: float
        age: int
        svHealth: int
        tkDEPRECATED: int
        tb: int
        tauN: float
        deltaTauN: float
        gammaN: float
        p1: int
        p2: int
        p3: int
        p4: int
        freqNumDEPRECATED: int
        n4: int
        nt: int
        freqNum: int
        tkSeconds: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.GlonassEphemerisReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.GlonassEphemerisReader: ...
        @staticmethod
        def new_message() -> UbloxGnss.GlonassEphemerisBuilder: ...
        def to_dict(self) -> dict: ...

    class GlonassEphemerisReader(UbloxGnss.GlonassEphemeris):
        def as_builder(self) -> UbloxGnss.GlonassEphemerisBuilder: ...

    class GlonassEphemerisBuilder(UbloxGnss.GlonassEphemeris):
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.GlonassEphemerisBuilder: ...
        def copy(self) -> UbloxGnss.GlonassEphemerisBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.GlonassEphemerisReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class SatReport:
        class SatInfo:
            svId: int
            gnssId: int
            flagsBitfield: int
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[UbloxGnss.SatReport.SatInfoReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> UbloxGnss.SatReport.SatInfoReader: ...
            @staticmethod
            def new_message() -> UbloxGnss.SatReport.SatInfoBuilder: ...
            def to_dict(self) -> dict: ...

        class SatInfoReader(UbloxGnss.SatReport.SatInfo):
            def as_builder(self) -> UbloxGnss.SatReport.SatInfoBuilder: ...

        class SatInfoBuilder(UbloxGnss.SatReport.SatInfo):
            @staticmethod
            def from_dict(dictionary: dict) -> UbloxGnss.SatReport.SatInfoBuilder: ...
            def copy(self) -> UbloxGnss.SatReport.SatInfoBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> UbloxGnss.SatReport.SatInfoReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...
        iTow: int
        svs: Sequence[
            UbloxGnss.SatReport.SatInfo | UbloxGnss.SatReport.SatInfoBuilder | UbloxGnss.SatReport.SatInfoReader
        ]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[UbloxGnss.SatReportReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> UbloxGnss.SatReportReader: ...
        @staticmethod
        def new_message() -> UbloxGnss.SatReportBuilder: ...
        def to_dict(self) -> dict: ...

    class SatReportReader(UbloxGnss.SatReport):
        svs: Sequence[UbloxGnss.SatReport.SatInfoReader]
        def as_builder(self) -> UbloxGnss.SatReportBuilder: ...

    class SatReportBuilder(UbloxGnss.SatReport):
        svs: Sequence[
            UbloxGnss.SatReport.SatInfo | UbloxGnss.SatReport.SatInfoBuilder | UbloxGnss.SatReport.SatInfoReader
        ]
        @staticmethod
        def from_dict(dictionary: dict) -> UbloxGnss.SatReportBuilder: ...
        def copy(self) -> UbloxGnss.SatReportBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> UbloxGnss.SatReportReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    measurementReport: UbloxGnss.MeasurementReport | UbloxGnss.MeasurementReportBuilder | UbloxGnss.MeasurementReportReader
    ephemeris: UbloxGnss.Ephemeris | UbloxGnss.EphemerisBuilder | UbloxGnss.EphemerisReader
    ionoData: UbloxGnss.IonoData | UbloxGnss.IonoDataBuilder | UbloxGnss.IonoDataReader
    hwStatus: UbloxGnss.HwStatus | UbloxGnss.HwStatusBuilder | UbloxGnss.HwStatusReader
    hwStatus2: UbloxGnss.HwStatus2 | UbloxGnss.HwStatus2Builder | UbloxGnss.HwStatus2Reader
    glonassEphemeris: UbloxGnss.GlonassEphemeris | UbloxGnss.GlonassEphemerisBuilder | UbloxGnss.GlonassEphemerisReader
    satReport: UbloxGnss.SatReport | UbloxGnss.SatReportBuilder | UbloxGnss.SatReportReader
    def which(
        self,
    ) -> Literal[
        "measurementReport", "ephemeris", "ionoData", "hwStatus", "hwStatus2", "glonassEphemeris", "satReport"
    ]: ...
    @overload
    def init(self, name: Literal["measurementReport"]) -> UbloxGnss.MeasurementReport: ...
    @overload
    def init(self, name: Literal["ephemeris"]) -> UbloxGnss.Ephemeris: ...
    @overload
    def init(self, name: Literal["ionoData"]) -> UbloxGnss.IonoData: ...
    @overload
    def init(self, name: Literal["hwStatus"]) -> UbloxGnss.HwStatus: ...
    @overload
    def init(self, name: Literal["hwStatus2"]) -> UbloxGnss.HwStatus2: ...
    @overload
    def init(self, name: Literal["glonassEphemeris"]) -> UbloxGnss.GlonassEphemeris: ...
    @overload
    def init(self, name: Literal["satReport"]) -> UbloxGnss.SatReport: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[UbloxGnssReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> UbloxGnssReader: ...
    @staticmethod
    def new_message() -> UbloxGnssBuilder: ...
    def to_dict(self) -> dict: ...

class UbloxGnssReader(UbloxGnss):
    measurementReport: UbloxGnss.MeasurementReportReader
    ephemeris: UbloxGnss.EphemerisReader
    ionoData: UbloxGnss.IonoDataReader
    hwStatus: UbloxGnss.HwStatusReader
    hwStatus2: UbloxGnss.HwStatus2Reader
    glonassEphemeris: UbloxGnss.GlonassEphemerisReader
    satReport: UbloxGnss.SatReportReader
    def as_builder(self) -> UbloxGnssBuilder: ...

class UbloxGnssBuilder(UbloxGnss):
    measurementReport: UbloxGnss.MeasurementReport | UbloxGnss.MeasurementReportBuilder | UbloxGnss.MeasurementReportReader
    ephemeris: UbloxGnss.Ephemeris | UbloxGnss.EphemerisBuilder | UbloxGnss.EphemerisReader
    ionoData: UbloxGnss.IonoData | UbloxGnss.IonoDataBuilder | UbloxGnss.IonoDataReader
    hwStatus: UbloxGnss.HwStatus | UbloxGnss.HwStatusBuilder | UbloxGnss.HwStatusReader
    hwStatus2: UbloxGnss.HwStatus2 | UbloxGnss.HwStatus2Builder | UbloxGnss.HwStatus2Reader
    glonassEphemeris: UbloxGnss.GlonassEphemeris | UbloxGnss.GlonassEphemerisBuilder | UbloxGnss.GlonassEphemerisReader
    satReport: UbloxGnss.SatReport | UbloxGnss.SatReportBuilder | UbloxGnss.SatReportReader
    @staticmethod
    def from_dict(dictionary: dict) -> UbloxGnssBuilder: ...
    def copy(self) -> UbloxGnssBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> UbloxGnssReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class QcomGnss:
    class MeasurementStatus:
        subMillisecondIsValid: bool
        subBitTimeIsKnown: bool
        satelliteTimeIsKnown: bool
        bitEdgeConfirmedFromSignal: bool
        measuredVelocity: bool
        fineOrCoarseVelocity: bool
        lockPointValid: bool
        lockPointPositive: bool
        lastUpdateFromDifference: bool
        lastUpdateFromVelocityDifference: bool
        strongIndicationOfCrossCorelation: bool
        tentativeMeasurement: bool
        measurementNotUsable: bool
        sirCheckIsNeeded: bool
        probationMode: bool
        glonassMeanderBitEdgeValid: bool
        glonassTimeMarkValid: bool
        gpsRoundRobinRxDiversity: bool
        gpsRxDiversity: bool
        gpsLowBandwidthRxDiversityCombined: bool
        gpsHighBandwidthNu4: bool
        gpsHighBandwidthNu8: bool
        gpsHighBandwidthUniform: bool
        multipathIndicator: bool
        imdJammingIndicator: bool
        lteB13TxJammingIndicator: bool
        freshMeasurementIndicator: bool
        multipathEstimateIsValid: bool
        directionIsValid: bool
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[QcomGnss.MeasurementStatusReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> QcomGnss.MeasurementStatusReader: ...
        @staticmethod
        def new_message() -> QcomGnss.MeasurementStatusBuilder: ...
        def to_dict(self) -> dict: ...

    class MeasurementStatusReader(QcomGnss.MeasurementStatus):
        def as_builder(self) -> QcomGnss.MeasurementStatusBuilder: ...

    class MeasurementStatusBuilder(QcomGnss.MeasurementStatus):
        @staticmethod
        def from_dict(dictionary: dict) -> QcomGnss.MeasurementStatusBuilder: ...
        def copy(self) -> QcomGnss.MeasurementStatusBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> QcomGnss.MeasurementStatusReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class MeasurementReport:
        MeasurementSource = Literal["gps", "glonass", "beidou", "unknown3", "unknown4", "unknown5", "sbas"]

        class SV:
            SVObservationState = Literal[
                "idle",
                "search",
                "searchVerify",
                "bitEdge",
                "trackVerify",
                "track",
                "restart",
                "dpo",
                "glo10msBe",
                "glo10msAt",
            ]
            svId: int
            glonassFrequencyIndex: int
            observationState: QcomGnss.MeasurementReport.SV.SVObservationState
            observations: int
            goodObservations: int
            gpsParityErrorCount: int
            glonassHemmingErrorCount: int
            filterStages: int
            carrierNoise: int
            latency: int
            predetectInterval: int
            postdetections: int
            unfilteredMeasurementIntegral: int
            unfilteredMeasurementFraction: float
            unfilteredTimeUncertainty: float
            unfilteredSpeed: float
            unfilteredSpeedUncertainty: float
            measurementStatus: QcomGnss.MeasurementStatus | QcomGnss.MeasurementStatusBuilder | QcomGnss.MeasurementStatusReader
            multipathEstimate: int
            azimuth: float
            elevation: float
            carrierPhaseCyclesIntegral: int
            carrierPhaseCyclesFraction: int
            fineSpeed: float
            fineSpeedUncertainty: float
            cycleSlipCount: int
            def init(self, name: Literal["measurementStatus"]) -> QcomGnss.MeasurementStatus: ...
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[QcomGnss.MeasurementReport.SVReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> QcomGnss.MeasurementReport.SVReader: ...
            @staticmethod
            def new_message() -> QcomGnss.MeasurementReport.SVBuilder: ...
            def to_dict(self) -> dict: ...

        class SVReader(QcomGnss.MeasurementReport.SV):
            measurementStatus: QcomGnss.MeasurementStatusReader
            def as_builder(self) -> QcomGnss.MeasurementReport.SVBuilder: ...

        class SVBuilder(QcomGnss.MeasurementReport.SV):
            measurementStatus: QcomGnss.MeasurementStatus | QcomGnss.MeasurementStatusBuilder | QcomGnss.MeasurementStatusReader
            @staticmethod
            def from_dict(dictionary: dict) -> QcomGnss.MeasurementReport.SVBuilder: ...
            def copy(self) -> QcomGnss.MeasurementReport.SVBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> QcomGnss.MeasurementReport.SVReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...
        source: QcomGnss.MeasurementReport.MeasurementSource
        fCount: int
        gpsWeek: int
        glonassCycleNumber: int
        glonassNumberOfDays: int
        milliseconds: int
        timeBias: float
        clockTimeUncertainty: float
        clockFrequencyBias: float
        clockFrequencyUncertainty: float
        sv: Sequence[
            QcomGnss.MeasurementReport.SV | QcomGnss.MeasurementReport.SVBuilder | QcomGnss.MeasurementReport.SVReader
        ]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[QcomGnss.MeasurementReportReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> QcomGnss.MeasurementReportReader: ...
        @staticmethod
        def new_message() -> QcomGnss.MeasurementReportBuilder: ...
        def to_dict(self) -> dict: ...

    class MeasurementReportReader(QcomGnss.MeasurementReport):
        sv: Sequence[QcomGnss.MeasurementReport.SVReader]
        def as_builder(self) -> QcomGnss.MeasurementReportBuilder: ...

    class MeasurementReportBuilder(QcomGnss.MeasurementReport):
        sv: Sequence[
            QcomGnss.MeasurementReport.SV | QcomGnss.MeasurementReport.SVBuilder | QcomGnss.MeasurementReport.SVReader
        ]
        @staticmethod
        def from_dict(dictionary: dict) -> QcomGnss.MeasurementReportBuilder: ...
        def copy(self) -> QcomGnss.MeasurementReportBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> QcomGnss.MeasurementReportReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class ClockReport:
        hasFCount: bool
        fCount: int
        hasGpsWeek: bool
        gpsWeek: int
        hasGpsMilliseconds: bool
        gpsMilliseconds: int
        gpsTimeBias: float
        gpsClockTimeUncertainty: float
        gpsClockSource: int
        hasGlonassYear: bool
        glonassYear: int
        hasGlonassDay: bool
        glonassDay: int
        hasGlonassMilliseconds: bool
        glonassMilliseconds: int
        glonassTimeBias: float
        glonassClockTimeUncertainty: float
        glonassClockSource: int
        bdsWeek: int
        bdsMilliseconds: int
        bdsTimeBias: float
        bdsClockTimeUncertainty: float
        bdsClockSource: int
        galWeek: int
        galMilliseconds: int
        galTimeBias: float
        galClockTimeUncertainty: float
        galClockSource: int
        clockFrequencyBias: float
        clockFrequencyUncertainty: float
        frequencySource: int
        gpsLeapSeconds: int
        gpsLeapSecondsUncertainty: int
        gpsLeapSecondsSource: int
        gpsToGlonassTimeBiasMilliseconds: float
        gpsToGlonassTimeBiasMillisecondsUncertainty: float
        gpsToBdsTimeBiasMilliseconds: float
        gpsToBdsTimeBiasMillisecondsUncertainty: float
        bdsToGloTimeBiasMilliseconds: float
        bdsToGloTimeBiasMillisecondsUncertainty: float
        gpsToGalTimeBiasMilliseconds: float
        gpsToGalTimeBiasMillisecondsUncertainty: float
        galToGloTimeBiasMilliseconds: float
        galToGloTimeBiasMillisecondsUncertainty: float
        galToBdsTimeBiasMilliseconds: float
        galToBdsTimeBiasMillisecondsUncertainty: float
        hasRtcTime: bool
        systemRtcTime: int
        fCountOffset: int
        lpmRtcCount: int
        clockResets: int
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[QcomGnss.ClockReportReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> QcomGnss.ClockReportReader: ...
        @staticmethod
        def new_message() -> QcomGnss.ClockReportBuilder: ...
        def to_dict(self) -> dict: ...

    class ClockReportReader(QcomGnss.ClockReport):
        def as_builder(self) -> QcomGnss.ClockReportBuilder: ...

    class ClockReportBuilder(QcomGnss.ClockReport):
        @staticmethod
        def from_dict(dictionary: dict) -> QcomGnss.ClockReportBuilder: ...
        def copy(self) -> QcomGnss.ClockReportBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> QcomGnss.ClockReportReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class DrMeasurementReport:
        class SV:
            svId: int
            glonassFrequencyIndex: int
            observationState: QcomGnss.MeasurementReport.SV.SVObservationState
            observations: int
            goodObservations: int
            filterStages: int
            predetectInterval: int
            cycleSlipCount: int
            postdetections: int
            measurementStatus: QcomGnss.MeasurementStatus | QcomGnss.MeasurementStatusBuilder | QcomGnss.MeasurementStatusReader
            carrierNoise: int
            rfLoss: int
            latency: int
            filteredMeasurementFraction: float
            filteredMeasurementIntegral: int
            filteredTimeUncertainty: float
            filteredSpeed: float
            filteredSpeedUncertainty: float
            unfilteredMeasurementFraction: float
            unfilteredMeasurementIntegral: int
            unfilteredTimeUncertainty: float
            unfilteredSpeed: float
            unfilteredSpeedUncertainty: float
            multipathEstimate: int
            azimuth: float
            elevation: float
            dopplerAcceleration: float
            fineSpeed: float
            fineSpeedUncertainty: float
            carrierPhase: float
            fCount: int
            parityErrorCount: int
            goodParity: bool
            def init(self, name: Literal["measurementStatus"]) -> QcomGnss.MeasurementStatus: ...
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[QcomGnss.DrMeasurementReport.SVReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> QcomGnss.DrMeasurementReport.SVReader: ...
            @staticmethod
            def new_message() -> QcomGnss.DrMeasurementReport.SVBuilder: ...
            def to_dict(self) -> dict: ...

        class SVReader(QcomGnss.DrMeasurementReport.SV):
            measurementStatus: QcomGnss.MeasurementStatusReader
            def as_builder(self) -> QcomGnss.DrMeasurementReport.SVBuilder: ...

        class SVBuilder(QcomGnss.DrMeasurementReport.SV):
            measurementStatus: QcomGnss.MeasurementStatus | QcomGnss.MeasurementStatusBuilder | QcomGnss.MeasurementStatusReader
            @staticmethod
            def from_dict(dictionary: dict) -> QcomGnss.DrMeasurementReport.SVBuilder: ...
            def copy(self) -> QcomGnss.DrMeasurementReport.SVBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> QcomGnss.DrMeasurementReport.SVReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...
        reason: int
        seqNum: int
        seqMax: int
        rfLoss: int
        systemRtcValid: bool
        fCount: int
        clockResets: int
        systemRtcTime: int
        gpsLeapSeconds: int
        gpsLeapSecondsUncertainty: int
        gpsToGlonassTimeBiasMilliseconds: float
        gpsToGlonassTimeBiasMillisecondsUncertainty: float
        gpsWeek: int
        gpsMilliseconds: int
        gpsTimeBiasMs: int
        gpsClockTimeUncertaintyMs: int
        gpsClockSource: int
        glonassClockSource: int
        glonassYear: int
        glonassDay: int
        glonassMilliseconds: int
        glonassTimeBias: float
        glonassClockTimeUncertainty: float
        clockFrequencyBias: float
        clockFrequencyUncertainty: float
        frequencySource: int
        source: QcomGnss.MeasurementReport.MeasurementSource
        sv: Sequence[
            QcomGnss.DrMeasurementReport.SV
            | QcomGnss.DrMeasurementReport.SVBuilder
            | QcomGnss.DrMeasurementReport.SVReader
        ]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[QcomGnss.DrMeasurementReportReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> QcomGnss.DrMeasurementReportReader: ...
        @staticmethod
        def new_message() -> QcomGnss.DrMeasurementReportBuilder: ...
        def to_dict(self) -> dict: ...

    class DrMeasurementReportReader(QcomGnss.DrMeasurementReport):
        sv: Sequence[QcomGnss.DrMeasurementReport.SVReader]
        def as_builder(self) -> QcomGnss.DrMeasurementReportBuilder: ...

    class DrMeasurementReportBuilder(QcomGnss.DrMeasurementReport):
        sv: Sequence[
            QcomGnss.DrMeasurementReport.SV
            | QcomGnss.DrMeasurementReport.SVBuilder
            | QcomGnss.DrMeasurementReport.SVReader
        ]
        @staticmethod
        def from_dict(dictionary: dict) -> QcomGnss.DrMeasurementReportBuilder: ...
        def copy(self) -> QcomGnss.DrMeasurementReportBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> QcomGnss.DrMeasurementReportReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class DrSvPolyReport:
        svId: int
        frequencyIndex: int
        hasPosition: bool
        hasIono: bool
        hasTropo: bool
        hasElevation: bool
        polyFromXtra: bool
        hasSbasIono: bool
        iode: int
        t0: float
        xyz0: Sequence[float]
        xyzN: Sequence[float]
        other: Sequence[float]
        positionUncertainty: float
        ionoDelay: float
        ionoDot: float
        sbasIonoDelay: float
        sbasIonoDot: float
        tropoDelay: float
        elevation: float
        elevationDot: float
        elevationUncertainty: float
        velocityCoeff: Sequence[float]
        gpsWeek: int
        gpsTow: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[QcomGnss.DrSvPolyReportReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> QcomGnss.DrSvPolyReportReader: ...
        @staticmethod
        def new_message() -> QcomGnss.DrSvPolyReportBuilder: ...
        def to_dict(self) -> dict: ...

    class DrSvPolyReportReader(QcomGnss.DrSvPolyReport):
        def as_builder(self) -> QcomGnss.DrSvPolyReportBuilder: ...

    class DrSvPolyReportBuilder(QcomGnss.DrSvPolyReport):
        @staticmethod
        def from_dict(dictionary: dict) -> QcomGnss.DrSvPolyReportBuilder: ...
        def copy(self) -> QcomGnss.DrSvPolyReportBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> QcomGnss.DrSvPolyReportReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    logTs: int
    measurementReport: QcomGnss.MeasurementReport | QcomGnss.MeasurementReportBuilder | QcomGnss.MeasurementReportReader
    clockReport: QcomGnss.ClockReport | QcomGnss.ClockReportBuilder | QcomGnss.ClockReportReader
    drMeasurementReport: QcomGnss.DrMeasurementReport | QcomGnss.DrMeasurementReportBuilder | QcomGnss.DrMeasurementReportReader
    drSvPoly: QcomGnss.DrSvPolyReport | QcomGnss.DrSvPolyReportBuilder | QcomGnss.DrSvPolyReportReader
    rawLog: bytes
    def which(self) -> Literal["measurementReport", "clockReport", "drMeasurementReport", "drSvPoly", "rawLog"]: ...
    @overload
    def init(self, name: Literal["measurementReport"]) -> QcomGnss.MeasurementReport: ...
    @overload
    def init(self, name: Literal["clockReport"]) -> QcomGnss.ClockReport: ...
    @overload
    def init(self, name: Literal["drMeasurementReport"]) -> QcomGnss.DrMeasurementReport: ...
    @overload
    def init(self, name: Literal["drSvPoly"]) -> QcomGnss.DrSvPolyReport: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[QcomGnssReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> QcomGnssReader: ...
    @staticmethod
    def new_message() -> QcomGnssBuilder: ...
    def to_dict(self) -> dict: ...

class QcomGnssReader(QcomGnss):
    measurementReport: QcomGnss.MeasurementReportReader
    clockReport: QcomGnss.ClockReportReader
    drMeasurementReport: QcomGnss.DrMeasurementReportReader
    drSvPoly: QcomGnss.DrSvPolyReportReader
    def as_builder(self) -> QcomGnssBuilder: ...

class QcomGnssBuilder(QcomGnss):
    measurementReport: QcomGnss.MeasurementReport | QcomGnss.MeasurementReportBuilder | QcomGnss.MeasurementReportReader
    clockReport: QcomGnss.ClockReport | QcomGnss.ClockReportBuilder | QcomGnss.ClockReportReader
    drMeasurementReport: QcomGnss.DrMeasurementReport | QcomGnss.DrMeasurementReportBuilder | QcomGnss.DrMeasurementReportReader
    drSvPoly: QcomGnss.DrSvPolyReport | QcomGnss.DrSvPolyReportBuilder | QcomGnss.DrSvPolyReportReader
    @staticmethod
    def from_dict(dictionary: dict) -> QcomGnssBuilder: ...
    def copy(self) -> QcomGnssBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> QcomGnssReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Clocks:
    bootTimeNanos: int
    monotonicNanos: int
    monotonicRawNanos: int
    wallTimeNanos: int
    modemUptimeMillis: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ClocksReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ClocksReader: ...
    @staticmethod
    def new_message() -> ClocksBuilder: ...
    def to_dict(self) -> dict: ...

class ClocksReader(Clocks):
    def as_builder(self) -> ClocksBuilder: ...

class ClocksBuilder(Clocks):
    @staticmethod
    def from_dict(dictionary: dict) -> ClocksBuilder: ...
    def copy(self) -> ClocksBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ClocksReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveMpcData:
    x: Sequence[float]
    y: Sequence[float]
    psi: Sequence[float]
    curvature: Sequence[float]
    qpIterations: int
    calculationTime: int
    cost: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveMpcDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveMpcDataReader: ...
    @staticmethod
    def new_message() -> LiveMpcDataBuilder: ...
    def to_dict(self) -> dict: ...

class LiveMpcDataReader(LiveMpcData):
    def as_builder(self) -> LiveMpcDataBuilder: ...

class LiveMpcDataBuilder(LiveMpcData):
    @staticmethod
    def from_dict(dictionary: dict) -> LiveMpcDataBuilder: ...
    def copy(self) -> LiveMpcDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveMpcDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveLongitudinalMpcData:
    xEgo: Sequence[float]
    vEgo: Sequence[float]
    aEgo: Sequence[float]
    xLead: Sequence[float]
    vLead: Sequence[float]
    aLead: Sequence[float]
    aLeadTau: float
    qpIterations: int
    mpcId: int
    calculationTime: int
    cost: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveLongitudinalMpcDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveLongitudinalMpcDataReader: ...
    @staticmethod
    def new_message() -> LiveLongitudinalMpcDataBuilder: ...
    def to_dict(self) -> dict: ...

class LiveLongitudinalMpcDataReader(LiveLongitudinalMpcData):
    def as_builder(self) -> LiveLongitudinalMpcDataBuilder: ...

class LiveLongitudinalMpcDataBuilder(LiveLongitudinalMpcData):
    @staticmethod
    def from_dict(dictionary: dict) -> LiveLongitudinalMpcDataBuilder: ...
    def copy(self) -> LiveLongitudinalMpcDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveLongitudinalMpcDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Joystick:
    axes: Sequence[float]
    buttons: Sequence[bool]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[JoystickReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> JoystickReader: ...
    @staticmethod
    def new_message() -> JoystickBuilder: ...
    def to_dict(self) -> dict: ...

class JoystickReader(Joystick):
    def as_builder(self) -> JoystickBuilder: ...

class JoystickBuilder(Joystick):
    @staticmethod
    def from_dict(dictionary: dict) -> JoystickBuilder: ...
    def copy(self) -> JoystickBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> JoystickReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DriverStateV2:
    class DriverData:
        faceOrientation: Sequence[float]
        faceOrientationStd: Sequence[float]
        facePosition: Sequence[float]
        facePositionStd: Sequence[float]
        faceProb: float
        leftEyeProb: float
        rightEyeProb: float
        leftBlinkProb: float
        rightBlinkProb: float
        sunglassesProb: float
        occludedProb: float
        readyProb: Sequence[float]
        notReadyProb: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[DriverStateV2.DriverDataReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> DriverStateV2.DriverDataReader: ...
        @staticmethod
        def new_message() -> DriverStateV2.DriverDataBuilder: ...
        def to_dict(self) -> dict: ...

    class DriverDataReader(DriverStateV2.DriverData):
        def as_builder(self) -> DriverStateV2.DriverDataBuilder: ...

    class DriverDataBuilder(DriverStateV2.DriverData):
        @staticmethod
        def from_dict(dictionary: dict) -> DriverStateV2.DriverDataBuilder: ...
        def copy(self) -> DriverStateV2.DriverDataBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> DriverStateV2.DriverDataReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    frameId: int
    modelExecutionTime: float
    dspExecutionTime: float
    rawPredictions: bytes
    poorVisionProb: float
    wheelOnRightProb: float
    leftDriverData: DriverStateV2.DriverData | DriverStateV2.DriverDataBuilder | DriverStateV2.DriverDataReader
    rightDriverData: DriverStateV2.DriverData | DriverStateV2.DriverDataBuilder | DriverStateV2.DriverDataReader
    @overload
    def init(self, name: Literal["leftDriverData"]) -> DriverStateV2.DriverData: ...
    @overload
    def init(self, name: Literal["rightDriverData"]) -> DriverStateV2.DriverData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DriverStateV2Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DriverStateV2Reader: ...
    @staticmethod
    def new_message() -> DriverStateV2Builder: ...
    def to_dict(self) -> dict: ...

class DriverStateV2Reader(DriverStateV2):
    leftDriverData: DriverStateV2.DriverDataReader
    rightDriverData: DriverStateV2.DriverDataReader
    def as_builder(self) -> DriverStateV2Builder: ...

class DriverStateV2Builder(DriverStateV2):
    leftDriverData: DriverStateV2.DriverData | DriverStateV2.DriverDataBuilder | DriverStateV2.DriverDataReader
    rightDriverData: DriverStateV2.DriverData | DriverStateV2.DriverDataBuilder | DriverStateV2.DriverDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> DriverStateV2Builder: ...
    def copy(self) -> DriverStateV2Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DriverStateV2Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DriverStateDEPRECATED:
    frameId: int
    descriptorDEPRECATED: Sequence[float]
    stdDEPRECATED: float
    faceOrientation: Sequence[float]
    facePosition: Sequence[float]
    faceProb: float
    leftEyeProb: float
    rightEyeProb: float
    leftBlinkProb: float
    rightBlinkProb: float
    irPwrDEPRECATED: float
    faceOrientationStd: Sequence[float]
    facePositionStd: Sequence[float]
    sunglassesProb: float
    modelExecutionTime: float
    rawPredictions: bytes
    dspExecutionTime: float
    poorVision: float
    partialFace: float
    distractedPose: float
    distractedEyes: float
    eyesOnRoad: float
    phoneUse: float
    occludedProb: float
    readyProb: Sequence[float]
    notReadyProb: Sequence[float]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DriverStateDEPRECATEDReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DriverStateDEPRECATEDReader: ...
    @staticmethod
    def new_message() -> DriverStateDEPRECATEDBuilder: ...
    def to_dict(self) -> dict: ...

class DriverStateDEPRECATEDReader(DriverStateDEPRECATED):
    def as_builder(self) -> DriverStateDEPRECATEDBuilder: ...

class DriverStateDEPRECATEDBuilder(DriverStateDEPRECATED):
    @staticmethod
    def from_dict(dictionary: dict) -> DriverStateDEPRECATEDBuilder: ...
    def copy(self) -> DriverStateDEPRECATEDBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DriverStateDEPRECATEDReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DriverMonitoringState:
    events: Sequence[CarEvent | CarEventBuilder | CarEventReader]
    faceDetected: bool
    isDistracted: bool
    awarenessStatus: float
    isRHD: bool
    rhdCheckedDEPRECATED: bool
    posePitchOffset: float
    posePitchValidCount: int
    poseYawOffset: float
    poseYawValidCount: int
    stepChange: float
    awarenessActive: float
    awarenessPassive: float
    isLowStd: bool
    hiStdCount: int
    isPreviewDEPRECATED: bool
    isActiveMode: bool
    distractedType: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DriverMonitoringStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DriverMonitoringStateReader: ...
    @staticmethod
    def new_message() -> DriverMonitoringStateBuilder: ...
    def to_dict(self) -> dict: ...

class DriverMonitoringStateReader(DriverMonitoringState):
    events: Sequence[CarEventReader]
    def as_builder(self) -> DriverMonitoringStateBuilder: ...

class DriverMonitoringStateBuilder(DriverMonitoringState):
    events: Sequence[CarEvent | CarEventBuilder | CarEventReader]
    @staticmethod
    def from_dict(dictionary: dict) -> DriverMonitoringStateBuilder: ...
    def copy(self) -> DriverMonitoringStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DriverMonitoringStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Boot:
    wallTimeNanos: int
    lastKmsgDEPRECATED: bytes
    lastPmsgDEPRECATED: bytes
    launchLog: str
    #     pstore: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    #     commands: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    @overload
    def init(self, name: Literal["pstore"]) -> Map[str, bytes]: ...
    @overload
    def init(self, name: Literal["commands"]) -> Map[str, bytes]: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[BootReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> BootReader: ...
    @staticmethod
    def new_message() -> BootBuilder: ...
    def to_dict(self) -> dict: ...

class BootReader(Boot):
    #     pstore: Map[str, bytes]Reader
    #     commands: Map[str, bytes]Reader
    def as_builder(self) -> BootBuilder: ...

class BootBuilder(Boot):
    #     pstore: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    #     commands: Map[str, bytes] | Map[str, bytes]Builder | Map[str, bytes]Reader
    @staticmethod
    def from_dict(dictionary: dict) -> BootBuilder: ...
    def copy(self) -> BootBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> BootReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveParametersData:
    valid: bool
    gyroBias: float
    angleOffsetDeg: float
    angleOffsetAverageDeg: float
    stiffnessFactor: float
    steerRatio: float
    sensorValid: bool
    yawRateDEPRECATED: float
    posenetSpeed: float
    posenetValid: bool
    angleOffsetFastStd: float
    angleOffsetAverageStd: float
    stiffnessFactorStd: float
    steerRatioStd: float
    roll: float
    filterState: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    def init(self, name: Literal["filterState"]) -> LiveLocationKalman.Measurement: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveParametersDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveParametersDataReader: ...
    @staticmethod
    def new_message() -> LiveParametersDataBuilder: ...
    def to_dict(self) -> dict: ...

class LiveParametersDataReader(LiveParametersData):
    filterState: LiveLocationKalman.MeasurementReader
    def as_builder(self) -> LiveParametersDataBuilder: ...

class LiveParametersDataBuilder(LiveParametersData):
    filterState: LiveLocationKalman.Measurement | LiveLocationKalman.MeasurementBuilder | LiveLocationKalman.MeasurementReader
    @staticmethod
    def from_dict(dictionary: dict) -> LiveParametersDataBuilder: ...
    def copy(self) -> LiveParametersDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveParametersDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveTorqueParametersData:
    liveValid: bool
    latAccelFactorRaw: float
    latAccelOffsetRaw: float
    frictionCoefficientRaw: float
    latAccelFactorFiltered: float
    latAccelOffsetFiltered: float
    frictionCoefficientFiltered: float
    totalBucketPoints: float
    decay: float
    maxResets: float
    points: Sequence[Sequence[float]]
    version: int
    useParams: bool
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveTorqueParametersDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveTorqueParametersDataReader: ...
    @staticmethod
    def new_message() -> LiveTorqueParametersDataBuilder: ...
    def to_dict(self) -> dict: ...

class LiveTorqueParametersDataReader(LiveTorqueParametersData):
    def as_builder(self) -> LiveTorqueParametersDataBuilder: ...

class LiveTorqueParametersDataBuilder(LiveTorqueParametersData):
    @staticmethod
    def from_dict(dictionary: dict) -> LiveTorqueParametersDataBuilder: ...
    def copy(self) -> LiveTorqueParametersDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveTorqueParametersDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class LiveMapDataDEPRECATED:
    speedLimitValid: bool
    speedLimit: float
    curvatureValid: bool
    curvature: float
    wayId: int
    roadX: Sequence[float]
    roadY: Sequence[float]
    lastGps: GpsLocationData | GpsLocationDataBuilder | GpsLocationDataReader
    roadCurvatureX: Sequence[float]
    roadCurvature: Sequence[float]
    distToTurn: float
    mapValid: bool
    speedAdvisoryValid: bool
    speedAdvisory: float
    speedLimitAheadValid: bool
    speedLimitAhead: float
    speedLimitAheadDistance: float
    def init(self, name: Literal["lastGps"]) -> GpsLocationData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[LiveMapDataDEPRECATEDReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> LiveMapDataDEPRECATEDReader: ...
    @staticmethod
    def new_message() -> LiveMapDataDEPRECATEDBuilder: ...
    def to_dict(self) -> dict: ...

class LiveMapDataDEPRECATEDReader(LiveMapDataDEPRECATED):
    lastGps: GpsLocationDataReader
    def as_builder(self) -> LiveMapDataDEPRECATEDBuilder: ...

class LiveMapDataDEPRECATEDBuilder(LiveMapDataDEPRECATED):
    lastGps: GpsLocationData | GpsLocationDataBuilder | GpsLocationDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> LiveMapDataDEPRECATEDBuilder: ...
    def copy(self) -> LiveMapDataDEPRECATEDBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> LiveMapDataDEPRECATEDReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class CameraOdometry:
    trans: Sequence[float]
    rot: Sequence[float]
    transStd: Sequence[float]
    rotStd: Sequence[float]
    frameId: int
    timestampEof: int
    wideFromDeviceEuler: Sequence[float]
    wideFromDeviceEulerStd: Sequence[float]
    roadTransformTrans: Sequence[float]
    roadTransformTransStd: Sequence[float]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[CameraOdometryReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> CameraOdometryReader: ...
    @staticmethod
    def new_message() -> CameraOdometryBuilder: ...
    def to_dict(self) -> dict: ...

class CameraOdometryReader(CameraOdometry):
    def as_builder(self) -> CameraOdometryBuilder: ...

class CameraOdometryBuilder(CameraOdometry):
    @staticmethod
    def from_dict(dictionary: dict) -> CameraOdometryBuilder: ...
    def copy(self) -> CameraOdometryBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> CameraOdometryReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Sentinel:
    SentinelType = Literal["endOfSegment", "endOfRoute", "startOfSegment", "startOfRoute"]
    type: Sentinel.SentinelType
    signal: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SentinelReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SentinelReader: ...
    @staticmethod
    def new_message() -> SentinelBuilder: ...
    def to_dict(self) -> dict: ...

class SentinelReader(Sentinel):
    def as_builder(self) -> SentinelBuilder: ...

class SentinelBuilder(Sentinel):
    @staticmethod
    def from_dict(dictionary: dict) -> SentinelBuilder: ...
    def copy(self) -> SentinelBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SentinelReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class UIDebug:
    drawTimeMillis: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[UIDebugReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> UIDebugReader: ...
    @staticmethod
    def new_message() -> UIDebugBuilder: ...
    def to_dict(self) -> dict: ...

class UIDebugReader(UIDebug):
    def as_builder(self) -> UIDebugBuilder: ...

class UIDebugBuilder(UIDebug):
    @staticmethod
    def from_dict(dictionary: dict) -> UIDebugBuilder: ...
    def copy(self) -> UIDebugBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> UIDebugReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class ManagerState:
    class ProcessState:
        name: str
        pid: int
        running: bool
        exitCode: int
        shouldBeRunning: bool
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[ManagerState.ProcessStateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> ManagerState.ProcessStateReader: ...
        @staticmethod
        def new_message() -> ManagerState.ProcessStateBuilder: ...
        def to_dict(self) -> dict: ...

    class ProcessStateReader(ManagerState.ProcessState):
        def as_builder(self) -> ManagerState.ProcessStateBuilder: ...

    class ProcessStateBuilder(ManagerState.ProcessState):
        @staticmethod
        def from_dict(dictionary: dict) -> ManagerState.ProcessStateBuilder: ...
        def copy(self) -> ManagerState.ProcessStateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> ManagerState.ProcessStateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    processes: Sequence[ManagerState.ProcessState | ManagerState.ProcessStateBuilder | ManagerState.ProcessStateReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ManagerStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ManagerStateReader: ...
    @staticmethod
    def new_message() -> ManagerStateBuilder: ...
    def to_dict(self) -> dict: ...

class ManagerStateReader(ManagerState):
    processes: Sequence[ManagerState.ProcessStateReader]
    def as_builder(self) -> ManagerStateBuilder: ...

class ManagerStateBuilder(ManagerState):
    processes: Sequence[ManagerState.ProcessState | ManagerState.ProcessStateBuilder | ManagerState.ProcessStateReader]
    @staticmethod
    def from_dict(dictionary: dict) -> ManagerStateBuilder: ...
    def copy(self) -> ManagerStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ManagerStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class UploaderState:
    immediateQueueSize: int
    immediateQueueCount: int
    rawQueueSize: int
    rawQueueCount: int
    lastTime: float
    lastSpeed: float
    lastFilename: str
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[UploaderStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> UploaderStateReader: ...
    @staticmethod
    def new_message() -> UploaderStateBuilder: ...
    def to_dict(self) -> dict: ...

class UploaderStateReader(UploaderState):
    def as_builder(self) -> UploaderStateBuilder: ...

class UploaderStateBuilder(UploaderState):
    @staticmethod
    def from_dict(dictionary: dict) -> UploaderStateBuilder: ...
    def copy(self) -> UploaderStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> UploaderStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class NavInstruction:
    class Lane:
        Direction = Literal["none", "left", "right", "straight", "slightLeft", "slightRight"]
        directions: Sequence[
            NavInstruction.Lane.Direction | NavInstruction.Lane.DirectionBuilder | NavInstruction.Lane.DirectionReader
        ]
        active: bool
        activeDirection: NavInstruction.Lane.Direction
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[NavInstruction.LaneReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> NavInstruction.LaneReader: ...
        @staticmethod
        def new_message() -> NavInstruction.LaneBuilder: ...
        def to_dict(self) -> dict: ...

    class LaneReader(NavInstruction.Lane):
        directions: Sequence[NavInstruction.Lane.DirectionReader]
        def as_builder(self) -> NavInstruction.LaneBuilder: ...

    class LaneBuilder(NavInstruction.Lane):
        directions: Sequence[
            NavInstruction.Lane.Direction | NavInstruction.Lane.DirectionBuilder | NavInstruction.Lane.DirectionReader
        ]
        @staticmethod
        def from_dict(dictionary: dict) -> NavInstruction.LaneBuilder: ...
        def copy(self) -> NavInstruction.LaneBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> NavInstruction.LaneReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    SpeedLimitSign = Literal["mutcd", "vienna"]

    class Maneuver:
        distance: float
        type: str
        modifier: str
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[NavInstruction.ManeuverReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> NavInstruction.ManeuverReader: ...
        @staticmethod
        def new_message() -> NavInstruction.ManeuverBuilder: ...
        def to_dict(self) -> dict: ...

    class ManeuverReader(NavInstruction.Maneuver):
        def as_builder(self) -> NavInstruction.ManeuverBuilder: ...

    class ManeuverBuilder(NavInstruction.Maneuver):
        @staticmethod
        def from_dict(dictionary: dict) -> NavInstruction.ManeuverBuilder: ...
        def copy(self) -> NavInstruction.ManeuverBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> NavInstruction.ManeuverReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    maneuverPrimaryText: str
    maneuverSecondaryText: str
    maneuverDistance: float
    maneuverType: str
    maneuverModifier: str
    distanceRemaining: float
    timeRemaining: float
    timeRemainingTypical: float
    lanes: Sequence[NavInstruction.Lane | NavInstruction.LaneBuilder | NavInstruction.LaneReader]
    showFull: bool
    speedLimit: float
    speedLimitSign: NavInstruction.SpeedLimitSign
    allManeuvers: Sequence[NavInstruction.Maneuver | NavInstruction.ManeuverBuilder | NavInstruction.ManeuverReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[NavInstructionReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> NavInstructionReader: ...
    @staticmethod
    def new_message() -> NavInstructionBuilder: ...
    def to_dict(self) -> dict: ...

class NavInstructionReader(NavInstruction):
    lanes: Sequence[NavInstruction.LaneReader]
    allManeuvers: Sequence[NavInstruction.ManeuverReader]
    def as_builder(self) -> NavInstructionBuilder: ...

class NavInstructionBuilder(NavInstruction):
    lanes: Sequence[NavInstruction.Lane | NavInstruction.LaneBuilder | NavInstruction.LaneReader]
    allManeuvers: Sequence[NavInstruction.Maneuver | NavInstruction.ManeuverBuilder | NavInstruction.ManeuverReader]
    @staticmethod
    def from_dict(dictionary: dict) -> NavInstructionBuilder: ...
    def copy(self) -> NavInstructionBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> NavInstructionReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class NavRoute:
    class Coordinate:
        latitude: float
        longitude: float
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[NavRoute.CoordinateReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> NavRoute.CoordinateReader: ...
        @staticmethod
        def new_message() -> NavRoute.CoordinateBuilder: ...
        def to_dict(self) -> dict: ...

    class CoordinateReader(NavRoute.Coordinate):
        def as_builder(self) -> NavRoute.CoordinateBuilder: ...

    class CoordinateBuilder(NavRoute.Coordinate):
        @staticmethod
        def from_dict(dictionary: dict) -> NavRoute.CoordinateBuilder: ...
        def copy(self) -> NavRoute.CoordinateBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> NavRoute.CoordinateReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    coordinates: Sequence[NavRoute.Coordinate | NavRoute.CoordinateBuilder | NavRoute.CoordinateReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[NavRouteReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> NavRouteReader: ...
    @staticmethod
    def new_message() -> NavRouteBuilder: ...
    def to_dict(self) -> dict: ...

class NavRouteReader(NavRoute):
    coordinates: Sequence[NavRoute.CoordinateReader]
    def as_builder(self) -> NavRouteBuilder: ...

class NavRouteBuilder(NavRoute):
    coordinates: Sequence[NavRoute.Coordinate | NavRoute.CoordinateBuilder | NavRoute.CoordinateReader]
    @staticmethod
    def from_dict(dictionary: dict) -> NavRouteBuilder: ...
    def copy(self) -> NavRouteBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> NavRouteReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class MapRenderState:
    locationMonoTime: int
    renderTime: float
    frameId: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[MapRenderStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> MapRenderStateReader: ...
    @staticmethod
    def new_message() -> MapRenderStateBuilder: ...
    def to_dict(self) -> dict: ...

class MapRenderStateReader(MapRenderState):
    def as_builder(self) -> MapRenderStateBuilder: ...

class MapRenderStateBuilder(MapRenderState):
    @staticmethod
    def from_dict(dictionary: dict) -> MapRenderStateBuilder: ...
    def copy(self) -> MapRenderStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> MapRenderStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class NavModelData:
    class XYData:
        x: Sequence[float]
        y: Sequence[float]
        xStd: Sequence[float]
        yStd: Sequence[float]
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[NavModelData.XYDataReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> NavModelData.XYDataReader: ...
        @staticmethod
        def new_message() -> NavModelData.XYDataBuilder: ...
        def to_dict(self) -> dict: ...

    class XYDataReader(NavModelData.XYData):
        def as_builder(self) -> NavModelData.XYDataBuilder: ...

    class XYDataBuilder(NavModelData.XYData):
        @staticmethod
        def from_dict(dictionary: dict) -> NavModelData.XYDataBuilder: ...
        def copy(self) -> NavModelData.XYDataBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> NavModelData.XYDataReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    frameId: int
    modelExecutionTime: float
    dspExecutionTime: float
    features: Sequence[float]
    position: NavModelData.XYData | NavModelData.XYDataBuilder | NavModelData.XYDataReader
    desirePrediction: Sequence[float]
    locationMonoTime: int
    def init(self, name: Literal["position"]) -> NavModelData.XYData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[NavModelDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> NavModelDataReader: ...
    @staticmethod
    def new_message() -> NavModelDataBuilder: ...
    def to_dict(self) -> dict: ...

class NavModelDataReader(NavModelData):
    position: NavModelData.XYDataReader
    def as_builder(self) -> NavModelDataBuilder: ...

class NavModelDataBuilder(NavModelData):
    position: NavModelData.XYData | NavModelData.XYDataBuilder | NavModelData.XYDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> NavModelDataBuilder: ...
    def copy(self) -> NavModelDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> NavModelDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class EncodeData:
    idx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    data: bytes
    header: bytes
    unixTimestampNanos: int
    def init(self, name: Literal["idx"]) -> EncodeIndex: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[EncodeDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> EncodeDataReader: ...
    @staticmethod
    def new_message() -> EncodeDataBuilder: ...
    def to_dict(self) -> dict: ...

class EncodeDataReader(EncodeData):
    idx: EncodeIndexReader
    def as_builder(self) -> EncodeDataBuilder: ...

class EncodeDataBuilder(EncodeData):
    idx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    @staticmethod
    def from_dict(dictionary: dict) -> EncodeDataBuilder: ...
    def copy(self) -> EncodeDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> EncodeDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class UserFlag:
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[UserFlagReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> UserFlagReader: ...
    @staticmethod
    def new_message() -> UserFlagBuilder: ...
    def to_dict(self) -> dict: ...

class UserFlagReader(UserFlag):
    def as_builder(self) -> UserFlagBuilder: ...

class UserFlagBuilder(UserFlag):
    @staticmethod
    def from_dict(dictionary: dict) -> UserFlagBuilder: ...
    def copy(self) -> UserFlagBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> UserFlagReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Microphone:
    soundPressure: float
    soundPressureWeightedDb: float
    filteredSoundPressureWeightedDb: float
    soundPressureWeighted: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[MicrophoneReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> MicrophoneReader: ...
    @staticmethod
    def new_message() -> MicrophoneBuilder: ...
    def to_dict(self) -> dict: ...

class MicrophoneReader(Microphone):
    def as_builder(self) -> MicrophoneBuilder: ...

class MicrophoneBuilder(Microphone):
    @staticmethod
    def from_dict(dictionary: dict) -> MicrophoneBuilder: ...
    def copy(self) -> MicrophoneBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> MicrophoneReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Event:
    logMonoTime: int
    initData: InitData | InitDataBuilder | InitDataReader
    roadCameraState: FrameData | FrameDataBuilder | FrameDataReader
    gpsNMEA: GPSNMEAData | GPSNMEADataBuilder | GPSNMEADataReader
    sensorEventDEPRECATED: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    can: Sequence[CanData | CanDataBuilder | CanDataReader]
    deviceState: DeviceState | DeviceStateBuilder | DeviceStateReader
    controlsState: ControlsState | ControlsStateBuilder | ControlsStateReader
    liveEventDEPRECATED: Sequence[LiveEventData | LiveEventDataBuilder | LiveEventDataReader]
    model: ModelData | ModelDataBuilder | ModelDataReader
    featuresDEPRECATED: CalibrationFeatures | CalibrationFeaturesBuilder | CalibrationFeaturesReader
    sensorEventsDEPRECATED: Sequence[SensorEventData | SensorEventDataBuilder | SensorEventDataReader]
    pandaStateDEPRECATED: PandaState | PandaStateBuilder | PandaStateReader
    radarState: RadarState | RadarStateBuilder | RadarStateReader
    liveUIDEPRECATED: LiveUI | LiveUIBuilder | LiveUIReader
    roadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    liveTracks: Sequence[LiveTracks | LiveTracksBuilder | LiveTracksReader]
    sendcan: Sequence[CanData | CanDataBuilder | CanDataReader]
    logMessage: str
    liveCalibration: LiveCalibrationData | LiveCalibrationDataBuilder | LiveCalibrationDataReader
    androidLog: AndroidLogEntry | AndroidLogEntryBuilder | AndroidLogEntryReader
    gpsLocation: GpsLocationData | GpsLocationDataBuilder | GpsLocationDataReader
    carState: CarState | CarStateBuilder | CarStateReader
    carControl: CarControl | CarControlBuilder | CarControlReader
    longitudinalPlan: LongitudinalPlan | LongitudinalPlanBuilder | LongitudinalPlanReader
    liveLocationDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    ethernetDataDEPRECATED: Sequence[EthernetPacket | EthernetPacketBuilder | EthernetPacketReader]
    navUpdateDEPRECATED: NavUpdate | NavUpdateBuilder | NavUpdateReader
    cellInfoDEPRECATED: Sequence[CellInfo | CellInfoBuilder | CellInfoReader]
    wifiScanDEPRECATED: Sequence[WifiScan | WifiScanBuilder | WifiScanReader]
    androidGnssDEPRECATED: AndroidGnss | AndroidGnssBuilder | AndroidGnssReader
    qcomGnss: QcomGnss | QcomGnssBuilder | QcomGnssReader
    lidarPtsDEPRECATED: LidarPts | LidarPtsBuilder | LidarPtsReader
    procLog: ProcLog | ProcLogBuilder | ProcLogReader
    ubloxGnss: UbloxGnss | UbloxGnssBuilder | UbloxGnssReader
    clocks: Clocks | ClocksBuilder | ClocksReader
    liveMpcDEPRECATED: LiveMpcData | LiveMpcDataBuilder | LiveMpcDataReader
    liveLongitudinalMpcDEPRECATED: LiveLongitudinalMpcData | LiveLongitudinalMpcDataBuilder | LiveLongitudinalMpcDataReader
    navStatusDEPRECATED: NavStatus | NavStatusBuilder | NavStatusReader
    ubloxRaw: bytes
    gpsPlannerPointsDEPRECATED: GPSPlannerPoints | GPSPlannerPointsBuilder | GPSPlannerPointsReader
    gpsPlannerPlanDEPRECATED: GPSPlannerPlan | GPSPlannerPlanBuilder | GPSPlannerPlanReader
    applanixRawDEPRECATED: bytes
    trafficEventsDEPRECATED: Sequence[TrafficEvent | TrafficEventBuilder | TrafficEventReader]
    liveLocationTimingDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    orbslamCorrectionDEPRECATED: OrbslamCorrection | OrbslamCorrectionBuilder | OrbslamCorrectionReader
    liveLocationCorrectedDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    orbObservationDEPRECATED: Sequence[OrbObservation | OrbObservationBuilder | OrbObservationReader]
    gpsLocationExternal: GpsLocationData | GpsLocationDataBuilder | GpsLocationDataReader
    locationDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    uiNavigationEventDEPRECATED: UiNavigationEvent | UiNavigationEventBuilder | UiNavigationEventReader
    liveLocationKalmanDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    testJoystick: Joystick | JoystickBuilder | JoystickReader
    orbOdometryDEPRECATED: OrbOdometry | OrbOdometryBuilder | OrbOdometryReader
    orbFeaturesDEPRECATED: OrbFeatures | OrbFeaturesBuilder | OrbFeaturesReader
    applanixLocationDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    orbKeyFrameDEPRECATED: OrbKeyFrame | OrbKeyFrameBuilder | OrbKeyFrameReader
    uiLayoutStateDEPRECATED: UiLayoutState | UiLayoutStateBuilder | UiLayoutStateReader
    orbFeaturesSummaryDEPRECATED: OrbFeaturesSummary | OrbFeaturesSummaryBuilder | OrbFeaturesSummaryReader
    driverStateDEPRECATED: DriverStateDEPRECATED | DriverStateDEPRECATEDBuilder | DriverStateDEPRECATEDReader
    boot: Boot | BootBuilder | BootReader
    liveParameters: LiveParametersData | LiveParametersDataBuilder | LiveParametersDataReader
    liveMapDataDEPRECATED: LiveMapDataDEPRECATED | LiveMapDataDEPRECATEDBuilder | LiveMapDataDEPRECATEDReader
    cameraOdometry: CameraOdometry | CameraOdometryBuilder | CameraOdometryReader
    lateralPlan: LateralPlan | LateralPlanBuilder | LateralPlanReader
    kalmanOdometryDEPRECATED: KalmanOdometry | KalmanOdometryBuilder | KalmanOdometryReader
    thumbnail: Thumbnail | ThumbnailBuilder | ThumbnailReader
    valid: bool
    carEvents: Sequence[CarEvent | CarEventBuilder | CarEventReader]
    carParams: CarParams | CarParamsBuilder | CarParamsReader
    driverCameraState: FrameData | FrameDataBuilder | FrameDataReader
    driverMonitoringState: DriverMonitoringState | DriverMonitoringStateBuilder | DriverMonitoringStateReader
    liveLocationKalman: LiveLocationKalman | LiveLocationKalmanBuilder | LiveLocationKalmanReader
    sentinel: Sentinel | SentinelBuilder | SentinelReader
    wideRoadCameraState: FrameData | FrameDataBuilder | FrameDataReader
    modelV2: ModelDataV2 | ModelDataV2Builder | ModelDataV2Reader
    driverEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    wideRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    managerState: ManagerState | ManagerStateBuilder | ManagerStateReader
    uploaderState: UploaderState | UploaderStateBuilder | UploaderStateReader
    peripheralState: PeripheralState | PeripheralStateBuilder | PeripheralStateReader
    pandaStates: Sequence[PandaState | PandaStateBuilder | PandaStateReader]
    navInstruction: NavInstruction | NavInstructionBuilder | NavInstructionReader
    navRoute: NavRoute | NavRouteBuilder | NavRouteReader
    navThumbnail: Thumbnail | ThumbnailBuilder | ThumbnailReader
    errorLogMessage: str
    roadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    driverEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    wideRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    qRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    qRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    gnssMeasurements: GnssMeasurements | GnssMeasurementsBuilder | GnssMeasurementsReader
    driverStateV2: DriverStateV2 | DriverStateV2Builder | DriverStateV2Reader
    userFlag: UserFlag | UserFlagBuilder | UserFlagReader
    liveTorqueParameters: LiveTorqueParametersData | LiveTorqueParametersDataBuilder | LiveTorqueParametersDataReader
    magnetometer: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    lightSensor: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    temperatureSensor: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    accelerometer: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    gyroscope: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    gyroscope2: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    accelerometer2: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    uiDebug: UIDebug | UIDebugBuilder | UIDebugReader
    microphone: Microphone | MicrophoneBuilder | MicrophoneReader
    navModel: NavModelData | NavModelDataBuilder | NavModelDataReader
    mapRenderState: MapRenderState | MapRenderStateBuilder | MapRenderStateReader
    uiPlan: UiPlan | UiPlanBuilder | UiPlanReader
    customReserved0: CustomReserved0 | CustomReserved0Builder | CustomReserved0Reader
    customReserved1: CustomReserved1 | CustomReserved1Builder | CustomReserved1Reader
    customReserved2: CustomReserved2 | CustomReserved2Builder | CustomReserved2Reader
    customReserved3: CustomReserved3 | CustomReserved3Builder | CustomReserved3Reader
    customReserved4: CustomReserved4 | CustomReserved4Builder | CustomReserved4Reader
    customReserved5: CustomReserved5 | CustomReserved5Builder | CustomReserved5Reader
    customReserved6: CustomReserved6 | CustomReserved6Builder | CustomReserved6Reader
    customReserved7: CustomReserved7 | CustomReserved7Builder | CustomReserved7Reader
    customReserved8: CustomReserved8 | CustomReserved8Builder | CustomReserved8Reader
    customReserved9: CustomReserved9 | CustomReserved9Builder | CustomReserved9Reader
    livestreamRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    livestreamWideRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    livestreamDriverEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    livestreamRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    livestreamWideRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    livestreamDriverEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    temperatureSensor2: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    def which(
        self,
    ) -> Literal[
        "initData",
        "roadCameraState",
        "gpsNMEA",
        "sensorEventDEPRECATED",
        "can",
        "deviceState",
        "controlsState",
        "liveEventDEPRECATED",
        "model",
        "featuresDEPRECATED",
        "sensorEventsDEPRECATED",
        "pandaStateDEPRECATED",
        "radarState",
        "liveUIDEPRECATED",
        "roadEncodeIdx",
        "liveTracks",
        "sendcan",
        "logMessage",
        "liveCalibration",
        "androidLog",
        "gpsLocation",
        "carState",
        "carControl",
        "longitudinalPlan",
        "liveLocationDEPRECATED",
        "ethernetDataDEPRECATED",
        "navUpdateDEPRECATED",
        "cellInfoDEPRECATED",
        "wifiScanDEPRECATED",
        "androidGnssDEPRECATED",
        "qcomGnss",
        "lidarPtsDEPRECATED",
        "procLog",
        "ubloxGnss",
        "clocks",
        "liveMpcDEPRECATED",
        "liveLongitudinalMpcDEPRECATED",
        "navStatusDEPRECATED",
        "ubloxRaw",
        "gpsPlannerPointsDEPRECATED",
        "gpsPlannerPlanDEPRECATED",
        "applanixRawDEPRECATED",
        "trafficEventsDEPRECATED",
        "liveLocationTimingDEPRECATED",
        "orbslamCorrectionDEPRECATED",
        "liveLocationCorrectedDEPRECATED",
        "orbObservationDEPRECATED",
        "gpsLocationExternal",
        "locationDEPRECATED",
        "uiNavigationEventDEPRECATED",
        "liveLocationKalmanDEPRECATED",
        "testJoystick",
        "orbOdometryDEPRECATED",
        "orbFeaturesDEPRECATED",
        "applanixLocationDEPRECATED",
        "orbKeyFrameDEPRECATED",
        "uiLayoutStateDEPRECATED",
        "orbFeaturesSummaryDEPRECATED",
        "driverStateDEPRECATED",
        "boot",
        "liveParameters",
        "liveMapDataDEPRECATED",
        "cameraOdometry",
        "lateralPlan",
        "kalmanOdometryDEPRECATED",
        "thumbnail",
        "carEvents",
        "carParams",
        "driverCameraState",
        "driverMonitoringState",
        "liveLocationKalman",
        "sentinel",
        "wideRoadCameraState",
        "modelV2",
        "driverEncodeIdx",
        "wideRoadEncodeIdx",
        "managerState",
        "uploaderState",
        "peripheralState",
        "pandaStates",
        "navInstruction",
        "navRoute",
        "navThumbnail",
        "errorLogMessage",
        "roadEncodeData",
        "driverEncodeData",
        "wideRoadEncodeData",
        "qRoadEncodeData",
        "qRoadEncodeIdx",
        "gnssMeasurements",
        "driverStateV2",
        "userFlag",
        "liveTorqueParameters",
        "magnetometer",
        "lightSensor",
        "temperatureSensor",
        "accelerometer",
        "gyroscope",
        "gyroscope2",
        "accelerometer2",
        "uiDebug",
        "microphone",
        "navModel",
        "mapRenderState",
        "uiPlan",
        "customReserved0",
        "customReserved1",
        "customReserved2",
        "customReserved3",
        "customReserved4",
        "customReserved5",
        "customReserved6",
        "customReserved7",
        "customReserved8",
        "customReserved9",
        "livestreamRoadEncodeIdx",
        "livestreamWideRoadEncodeIdx",
        "livestreamDriverEncodeIdx",
        "livestreamRoadEncodeData",
        "livestreamWideRoadEncodeData",
        "livestreamDriverEncodeData",
        "temperatureSensor2",
    ]: ...
    @overload
    def init(self, name: Literal["initData"]) -> InitData: ...
    @overload
    def init(self, name: Literal["roadCameraState"]) -> FrameData: ...
    @overload
    def init(self, name: Literal["gpsNMEA"]) -> GPSNMEAData: ...
    @overload
    def init(self, name: Literal["sensorEventDEPRECATED"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["deviceState"]) -> DeviceState: ...
    @overload
    def init(self, name: Literal["controlsState"]) -> ControlsState: ...
    @overload
    def init(self, name: Literal["model"]) -> ModelData: ...
    @overload
    def init(self, name: Literal["featuresDEPRECATED"]) -> CalibrationFeatures: ...
    @overload
    def init(self, name: Literal["pandaStateDEPRECATED"]) -> PandaState: ...
    @overload
    def init(self, name: Literal["radarState"]) -> RadarState: ...
    @overload
    def init(self, name: Literal["liveUIDEPRECATED"]) -> LiveUI: ...
    @overload
    def init(self, name: Literal["roadEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["liveCalibration"]) -> LiveCalibrationData: ...
    @overload
    def init(self, name: Literal["androidLog"]) -> AndroidLogEntry: ...
    @overload
    def init(self, name: Literal["gpsLocation"]) -> GpsLocationData: ...
    @overload
    def init(self, name: Literal["carState"]) -> CarState: ...
    @overload
    def init(self, name: Literal["carControl"]) -> CarControl: ...
    @overload
    def init(self, name: Literal["longitudinalPlan"]) -> LongitudinalPlan: ...
    @overload
    def init(self, name: Literal["liveLocationDEPRECATED"]) -> LiveLocationData: ...
    @overload
    def init(self, name: Literal["navUpdateDEPRECATED"]) -> NavUpdate: ...
    @overload
    def init(self, name: Literal["androidGnssDEPRECATED"]) -> AndroidGnss: ...
    @overload
    def init(self, name: Literal["qcomGnss"]) -> QcomGnss: ...
    @overload
    def init(self, name: Literal["lidarPtsDEPRECATED"]) -> LidarPts: ...
    @overload
    def init(self, name: Literal["procLog"]) -> ProcLog: ...
    @overload
    def init(self, name: Literal["ubloxGnss"]) -> UbloxGnss: ...
    @overload
    def init(self, name: Literal["clocks"]) -> Clocks: ...
    @overload
    def init(self, name: Literal["liveMpcDEPRECATED"]) -> LiveMpcData: ...
    @overload
    def init(self, name: Literal["liveLongitudinalMpcDEPRECATED"]) -> LiveLongitudinalMpcData: ...
    @overload
    def init(self, name: Literal["navStatusDEPRECATED"]) -> NavStatus: ...
    @overload
    def init(self, name: Literal["gpsPlannerPointsDEPRECATED"]) -> GPSPlannerPoints: ...
    @overload
    def init(self, name: Literal["gpsPlannerPlanDEPRECATED"]) -> GPSPlannerPlan: ...
    @overload
    def init(self, name: Literal["liveLocationTimingDEPRECATED"]) -> LiveLocationData: ...
    @overload
    def init(self, name: Literal["orbslamCorrectionDEPRECATED"]) -> OrbslamCorrection: ...
    @overload
    def init(self, name: Literal["liveLocationCorrectedDEPRECATED"]) -> LiveLocationData: ...
    @overload
    def init(self, name: Literal["gpsLocationExternal"]) -> GpsLocationData: ...
    @overload
    def init(self, name: Literal["locationDEPRECATED"]) -> LiveLocationData: ...
    @overload
    def init(self, name: Literal["uiNavigationEventDEPRECATED"]) -> UiNavigationEvent: ...
    @overload
    def init(self, name: Literal["liveLocationKalmanDEPRECATED"]) -> LiveLocationData: ...
    @overload
    def init(self, name: Literal["testJoystick"]) -> Joystick: ...
    @overload
    def init(self, name: Literal["orbOdometryDEPRECATED"]) -> OrbOdometry: ...
    @overload
    def init(self, name: Literal["orbFeaturesDEPRECATED"]) -> OrbFeatures: ...
    @overload
    def init(self, name: Literal["applanixLocationDEPRECATED"]) -> LiveLocationData: ...
    @overload
    def init(self, name: Literal["orbKeyFrameDEPRECATED"]) -> OrbKeyFrame: ...
    @overload
    def init(self, name: Literal["uiLayoutStateDEPRECATED"]) -> UiLayoutState: ...
    @overload
    def init(self, name: Literal["orbFeaturesSummaryDEPRECATED"]) -> OrbFeaturesSummary: ...
    @overload
    def init(self, name: Literal["driverStateDEPRECATED"]) -> DriverStateDEPRECATED: ...
    @overload
    def init(self, name: Literal["boot"]) -> Boot: ...
    @overload
    def init(self, name: Literal["liveParameters"]) -> LiveParametersData: ...
    @overload
    def init(self, name: Literal["liveMapDataDEPRECATED"]) -> LiveMapDataDEPRECATED: ...
    @overload
    def init(self, name: Literal["cameraOdometry"]) -> CameraOdometry: ...
    @overload
    def init(self, name: Literal["lateralPlan"]) -> LateralPlan: ...
    @overload
    def init(self, name: Literal["kalmanOdometryDEPRECATED"]) -> KalmanOdometry: ...
    @overload
    def init(self, name: Literal["thumbnail"]) -> Thumbnail: ...
    @overload
    def init(self, name: Literal["carParams"]) -> CarParams: ...
    @overload
    def init(self, name: Literal["driverCameraState"]) -> FrameData: ...
    @overload
    def init(self, name: Literal["driverMonitoringState"]) -> DriverMonitoringState: ...
    @overload
    def init(self, name: Literal["liveLocationKalman"]) -> LiveLocationKalman: ...
    @overload
    def init(self, name: Literal["sentinel"]) -> Sentinel: ...
    @overload
    def init(self, name: Literal["wideRoadCameraState"]) -> FrameData: ...
    @overload
    def init(self, name: Literal["modelV2"]) -> ModelDataV2: ...
    @overload
    def init(self, name: Literal["driverEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["wideRoadEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["managerState"]) -> ManagerState: ...
    @overload
    def init(self, name: Literal["uploaderState"]) -> UploaderState: ...
    @overload
    def init(self, name: Literal["peripheralState"]) -> PeripheralState: ...
    @overload
    def init(self, name: Literal["navInstruction"]) -> NavInstruction: ...
    @overload
    def init(self, name: Literal["navRoute"]) -> NavRoute: ...
    @overload
    def init(self, name: Literal["navThumbnail"]) -> Thumbnail: ...
    @overload
    def init(self, name: Literal["roadEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["driverEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["wideRoadEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["qRoadEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["qRoadEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["gnssMeasurements"]) -> GnssMeasurements: ...
    @overload
    def init(self, name: Literal["driverStateV2"]) -> DriverStateV2: ...
    @overload
    def init(self, name: Literal["userFlag"]) -> UserFlag: ...
    @overload
    def init(self, name: Literal["liveTorqueParameters"]) -> LiveTorqueParametersData: ...
    @overload
    def init(self, name: Literal["magnetometer"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["lightSensor"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["temperatureSensor"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["accelerometer"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["gyroscope"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["gyroscope2"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["accelerometer2"]) -> SensorEventData: ...
    @overload
    def init(self, name: Literal["uiDebug"]) -> UIDebug: ...
    @overload
    def init(self, name: Literal["microphone"]) -> Microphone: ...
    @overload
    def init(self, name: Literal["navModel"]) -> NavModelData: ...
    @overload
    def init(self, name: Literal["mapRenderState"]) -> MapRenderState: ...
    @overload
    def init(self, name: Literal["uiPlan"]) -> UiPlan: ...
    @overload
    def init(self, name: Literal["customReserved0"]) -> CustomReserved0: ...
    @overload
    def init(self, name: Literal["customReserved1"]) -> CustomReserved1: ...
    @overload
    def init(self, name: Literal["customReserved2"]) -> CustomReserved2: ...
    @overload
    def init(self, name: Literal["customReserved3"]) -> CustomReserved3: ...
    @overload
    def init(self, name: Literal["customReserved4"]) -> CustomReserved4: ...
    @overload
    def init(self, name: Literal["customReserved5"]) -> CustomReserved5: ...
    @overload
    def init(self, name: Literal["customReserved6"]) -> CustomReserved6: ...
    @overload
    def init(self, name: Literal["customReserved7"]) -> CustomReserved7: ...
    @overload
    def init(self, name: Literal["customReserved8"]) -> CustomReserved8: ...
    @overload
    def init(self, name: Literal["customReserved9"]) -> CustomReserved9: ...
    @overload
    def init(self, name: Literal["livestreamRoadEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["livestreamWideRoadEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["livestreamDriverEncodeIdx"]) -> EncodeIndex: ...
    @overload
    def init(self, name: Literal["livestreamRoadEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["livestreamWideRoadEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["livestreamDriverEncodeData"]) -> EncodeData: ...
    @overload
    def init(self, name: Literal["temperatureSensor2"]) -> SensorEventData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[EventReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> EventReader: ...
    @staticmethod
    def new_message() -> EventBuilder: ...
    def to_dict(self) -> dict: ...

class EventReader(Event):
    initData: InitDataReader
    roadCameraState: FrameDataReader
    gpsNMEA: GPSNMEADataReader
    sensorEventDEPRECATED: SensorEventDataReader
    can: Sequence[CanDataReader]
    deviceState: DeviceStateReader
    controlsState: ControlsStateReader
    liveEventDEPRECATED: Sequence[LiveEventDataReader]
    model: ModelDataReader
    featuresDEPRECATED: CalibrationFeaturesReader
    sensorEventsDEPRECATED: Sequence[SensorEventDataReader]
    pandaStateDEPRECATED: PandaStateReader
    radarState: RadarStateReader
    liveUIDEPRECATED: LiveUIReader
    roadEncodeIdx: EncodeIndexReader
    liveTracks: Sequence[LiveTracksReader]
    sendcan: Sequence[CanDataReader]
    liveCalibration: LiveCalibrationDataReader
    androidLog: AndroidLogEntryReader
    gpsLocation: GpsLocationDataReader
    carState: CarStateReader
    carControl: CarControlReader
    longitudinalPlan: LongitudinalPlanReader
    liveLocationDEPRECATED: LiveLocationDataReader
    ethernetDataDEPRECATED: Sequence[EthernetPacketReader]
    navUpdateDEPRECATED: NavUpdateReader
    cellInfoDEPRECATED: Sequence[CellInfoReader]
    wifiScanDEPRECATED: Sequence[WifiScanReader]
    androidGnssDEPRECATED: AndroidGnssReader
    qcomGnss: QcomGnssReader
    lidarPtsDEPRECATED: LidarPtsReader
    procLog: ProcLogReader
    ubloxGnss: UbloxGnssReader
    clocks: ClocksReader
    liveMpcDEPRECATED: LiveMpcDataReader
    liveLongitudinalMpcDEPRECATED: LiveLongitudinalMpcDataReader
    navStatusDEPRECATED: NavStatusReader
    gpsPlannerPointsDEPRECATED: GPSPlannerPointsReader
    gpsPlannerPlanDEPRECATED: GPSPlannerPlanReader
    trafficEventsDEPRECATED: Sequence[TrafficEventReader]
    liveLocationTimingDEPRECATED: LiveLocationDataReader
    orbslamCorrectionDEPRECATED: OrbslamCorrectionReader
    liveLocationCorrectedDEPRECATED: LiveLocationDataReader
    orbObservationDEPRECATED: Sequence[OrbObservationReader]
    gpsLocationExternal: GpsLocationDataReader
    locationDEPRECATED: LiveLocationDataReader
    uiNavigationEventDEPRECATED: UiNavigationEventReader
    liveLocationKalmanDEPRECATED: LiveLocationDataReader
    testJoystick: JoystickReader
    orbOdometryDEPRECATED: OrbOdometryReader
    orbFeaturesDEPRECATED: OrbFeaturesReader
    applanixLocationDEPRECATED: LiveLocationDataReader
    orbKeyFrameDEPRECATED: OrbKeyFrameReader
    uiLayoutStateDEPRECATED: UiLayoutStateReader
    orbFeaturesSummaryDEPRECATED: OrbFeaturesSummaryReader
    driverStateDEPRECATED: DriverStateDEPRECATEDReader
    boot: BootReader
    liveParameters: LiveParametersDataReader
    liveMapDataDEPRECATED: LiveMapDataDEPRECATEDReader
    cameraOdometry: CameraOdometryReader
    lateralPlan: LateralPlanReader
    kalmanOdometryDEPRECATED: KalmanOdometryReader
    thumbnail: ThumbnailReader
    carEvents: Sequence[CarEventReader]
    carParams: CarParamsReader
    driverCameraState: FrameDataReader
    driverMonitoringState: DriverMonitoringStateReader
    liveLocationKalman: LiveLocationKalmanReader
    sentinel: SentinelReader
    wideRoadCameraState: FrameDataReader
    modelV2: ModelDataV2Reader
    driverEncodeIdx: EncodeIndexReader
    wideRoadEncodeIdx: EncodeIndexReader
    managerState: ManagerStateReader
    uploaderState: UploaderStateReader
    peripheralState: PeripheralStateReader
    pandaStates: Sequence[PandaStateReader]
    navInstruction: NavInstructionReader
    navRoute: NavRouteReader
    navThumbnail: ThumbnailReader
    roadEncodeData: EncodeDataReader
    driverEncodeData: EncodeDataReader
    wideRoadEncodeData: EncodeDataReader
    qRoadEncodeData: EncodeDataReader
    qRoadEncodeIdx: EncodeIndexReader
    gnssMeasurements: GnssMeasurementsReader
    driverStateV2: DriverStateV2Reader
    userFlag: UserFlagReader
    liveTorqueParameters: LiveTorqueParametersDataReader
    magnetometer: SensorEventDataReader
    lightSensor: SensorEventDataReader
    temperatureSensor: SensorEventDataReader
    accelerometer: SensorEventDataReader
    gyroscope: SensorEventDataReader
    gyroscope2: SensorEventDataReader
    accelerometer2: SensorEventDataReader
    uiDebug: UIDebugReader
    microphone: MicrophoneReader
    navModel: NavModelDataReader
    mapRenderState: MapRenderStateReader
    uiPlan: UiPlanReader
    customReserved0: CustomReserved0Reader
    customReserved1: CustomReserved1Reader
    customReserved2: CustomReserved2Reader
    customReserved3: CustomReserved3Reader
    customReserved4: CustomReserved4Reader
    customReserved5: CustomReserved5Reader
    customReserved6: CustomReserved6Reader
    customReserved7: CustomReserved7Reader
    customReserved8: CustomReserved8Reader
    customReserved9: CustomReserved9Reader
    livestreamRoadEncodeIdx: EncodeIndexReader
    livestreamWideRoadEncodeIdx: EncodeIndexReader
    livestreamDriverEncodeIdx: EncodeIndexReader
    livestreamRoadEncodeData: EncodeDataReader
    livestreamWideRoadEncodeData: EncodeDataReader
    livestreamDriverEncodeData: EncodeDataReader
    temperatureSensor2: SensorEventDataReader
    def as_builder(self) -> EventBuilder: ...

class EventBuilder(Event):
    initData: InitData | InitDataBuilder | InitDataReader
    roadCameraState: FrameData | FrameDataBuilder | FrameDataReader
    gpsNMEA: GPSNMEAData | GPSNMEADataBuilder | GPSNMEADataReader
    sensorEventDEPRECATED: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    can: Sequence[CanData | CanDataBuilder | CanDataReader]
    deviceState: DeviceState | DeviceStateBuilder | DeviceStateReader
    controlsState: ControlsState | ControlsStateBuilder | ControlsStateReader
    liveEventDEPRECATED: Sequence[LiveEventData | LiveEventDataBuilder | LiveEventDataReader]
    model: ModelData | ModelDataBuilder | ModelDataReader
    featuresDEPRECATED: CalibrationFeatures | CalibrationFeaturesBuilder | CalibrationFeaturesReader
    sensorEventsDEPRECATED: Sequence[SensorEventData | SensorEventDataBuilder | SensorEventDataReader]
    pandaStateDEPRECATED: PandaState | PandaStateBuilder | PandaStateReader
    radarState: RadarState | RadarStateBuilder | RadarStateReader
    liveUIDEPRECATED: LiveUI | LiveUIBuilder | LiveUIReader
    roadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    liveTracks: Sequence[LiveTracks | LiveTracksBuilder | LiveTracksReader]
    sendcan: Sequence[CanData | CanDataBuilder | CanDataReader]
    liveCalibration: LiveCalibrationData | LiveCalibrationDataBuilder | LiveCalibrationDataReader
    androidLog: AndroidLogEntry | AndroidLogEntryBuilder | AndroidLogEntryReader
    gpsLocation: GpsLocationData | GpsLocationDataBuilder | GpsLocationDataReader
    carState: CarState | CarStateBuilder | CarStateReader
    carControl: CarControl | CarControlBuilder | CarControlReader
    longitudinalPlan: LongitudinalPlan | LongitudinalPlanBuilder | LongitudinalPlanReader
    liveLocationDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    ethernetDataDEPRECATED: Sequence[EthernetPacket | EthernetPacketBuilder | EthernetPacketReader]
    navUpdateDEPRECATED: NavUpdate | NavUpdateBuilder | NavUpdateReader
    cellInfoDEPRECATED: Sequence[CellInfo | CellInfoBuilder | CellInfoReader]
    wifiScanDEPRECATED: Sequence[WifiScan | WifiScanBuilder | WifiScanReader]
    androidGnssDEPRECATED: AndroidGnss | AndroidGnssBuilder | AndroidGnssReader
    qcomGnss: QcomGnss | QcomGnssBuilder | QcomGnssReader
    lidarPtsDEPRECATED: LidarPts | LidarPtsBuilder | LidarPtsReader
    procLog: ProcLog | ProcLogBuilder | ProcLogReader
    ubloxGnss: UbloxGnss | UbloxGnssBuilder | UbloxGnssReader
    clocks: Clocks | ClocksBuilder | ClocksReader
    liveMpcDEPRECATED: LiveMpcData | LiveMpcDataBuilder | LiveMpcDataReader
    liveLongitudinalMpcDEPRECATED: LiveLongitudinalMpcData | LiveLongitudinalMpcDataBuilder | LiveLongitudinalMpcDataReader
    navStatusDEPRECATED: NavStatus | NavStatusBuilder | NavStatusReader
    gpsPlannerPointsDEPRECATED: GPSPlannerPoints | GPSPlannerPointsBuilder | GPSPlannerPointsReader
    gpsPlannerPlanDEPRECATED: GPSPlannerPlan | GPSPlannerPlanBuilder | GPSPlannerPlanReader
    trafficEventsDEPRECATED: Sequence[TrafficEvent | TrafficEventBuilder | TrafficEventReader]
    liveLocationTimingDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    orbslamCorrectionDEPRECATED: OrbslamCorrection | OrbslamCorrectionBuilder | OrbslamCorrectionReader
    liveLocationCorrectedDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    orbObservationDEPRECATED: Sequence[OrbObservation | OrbObservationBuilder | OrbObservationReader]
    gpsLocationExternal: GpsLocationData | GpsLocationDataBuilder | GpsLocationDataReader
    locationDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    uiNavigationEventDEPRECATED: UiNavigationEvent | UiNavigationEventBuilder | UiNavigationEventReader
    liveLocationKalmanDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    testJoystick: Joystick | JoystickBuilder | JoystickReader
    orbOdometryDEPRECATED: OrbOdometry | OrbOdometryBuilder | OrbOdometryReader
    orbFeaturesDEPRECATED: OrbFeatures | OrbFeaturesBuilder | OrbFeaturesReader
    applanixLocationDEPRECATED: LiveLocationData | LiveLocationDataBuilder | LiveLocationDataReader
    orbKeyFrameDEPRECATED: OrbKeyFrame | OrbKeyFrameBuilder | OrbKeyFrameReader
    uiLayoutStateDEPRECATED: UiLayoutState | UiLayoutStateBuilder | UiLayoutStateReader
    orbFeaturesSummaryDEPRECATED: OrbFeaturesSummary | OrbFeaturesSummaryBuilder | OrbFeaturesSummaryReader
    driverStateDEPRECATED: DriverStateDEPRECATED | DriverStateDEPRECATEDBuilder | DriverStateDEPRECATEDReader
    boot: Boot | BootBuilder | BootReader
    liveParameters: LiveParametersData | LiveParametersDataBuilder | LiveParametersDataReader
    liveMapDataDEPRECATED: LiveMapDataDEPRECATED | LiveMapDataDEPRECATEDBuilder | LiveMapDataDEPRECATEDReader
    cameraOdometry: CameraOdometry | CameraOdometryBuilder | CameraOdometryReader
    lateralPlan: LateralPlan | LateralPlanBuilder | LateralPlanReader
    kalmanOdometryDEPRECATED: KalmanOdometry | KalmanOdometryBuilder | KalmanOdometryReader
    thumbnail: Thumbnail | ThumbnailBuilder | ThumbnailReader
    carEvents: Sequence[CarEvent | CarEventBuilder | CarEventReader]
    carParams: CarParams | CarParamsBuilder | CarParamsReader
    driverCameraState: FrameData | FrameDataBuilder | FrameDataReader
    driverMonitoringState: DriverMonitoringState | DriverMonitoringStateBuilder | DriverMonitoringStateReader
    liveLocationKalman: LiveLocationKalman | LiveLocationKalmanBuilder | LiveLocationKalmanReader
    sentinel: Sentinel | SentinelBuilder | SentinelReader
    wideRoadCameraState: FrameData | FrameDataBuilder | FrameDataReader
    modelV2: ModelDataV2 | ModelDataV2Builder | ModelDataV2Reader
    driverEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    wideRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    managerState: ManagerState | ManagerStateBuilder | ManagerStateReader
    uploaderState: UploaderState | UploaderStateBuilder | UploaderStateReader
    peripheralState: PeripheralState | PeripheralStateBuilder | PeripheralStateReader
    pandaStates: Sequence[PandaState | PandaStateBuilder | PandaStateReader]
    navInstruction: NavInstruction | NavInstructionBuilder | NavInstructionReader
    navRoute: NavRoute | NavRouteBuilder | NavRouteReader
    navThumbnail: Thumbnail | ThumbnailBuilder | ThumbnailReader
    roadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    driverEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    wideRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    qRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    qRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    gnssMeasurements: GnssMeasurements | GnssMeasurementsBuilder | GnssMeasurementsReader
    driverStateV2: DriverStateV2 | DriverStateV2Builder | DriverStateV2Reader
    userFlag: UserFlag | UserFlagBuilder | UserFlagReader
    liveTorqueParameters: LiveTorqueParametersData | LiveTorqueParametersDataBuilder | LiveTorqueParametersDataReader
    magnetometer: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    lightSensor: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    temperatureSensor: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    accelerometer: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    gyroscope: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    gyroscope2: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    accelerometer2: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    uiDebug: UIDebug | UIDebugBuilder | UIDebugReader
    microphone: Microphone | MicrophoneBuilder | MicrophoneReader
    navModel: NavModelData | NavModelDataBuilder | NavModelDataReader
    mapRenderState: MapRenderState | MapRenderStateBuilder | MapRenderStateReader
    uiPlan: UiPlan | UiPlanBuilder | UiPlanReader
    customReserved0: CustomReserved0 | CustomReserved0Builder | CustomReserved0Reader
    customReserved1: CustomReserved1 | CustomReserved1Builder | CustomReserved1Reader
    customReserved2: CustomReserved2 | CustomReserved2Builder | CustomReserved2Reader
    customReserved3: CustomReserved3 | CustomReserved3Builder | CustomReserved3Reader
    customReserved4: CustomReserved4 | CustomReserved4Builder | CustomReserved4Reader
    customReserved5: CustomReserved5 | CustomReserved5Builder | CustomReserved5Reader
    customReserved6: CustomReserved6 | CustomReserved6Builder | CustomReserved6Reader
    customReserved7: CustomReserved7 | CustomReserved7Builder | CustomReserved7Reader
    customReserved8: CustomReserved8 | CustomReserved8Builder | CustomReserved8Reader
    customReserved9: CustomReserved9 | CustomReserved9Builder | CustomReserved9Reader
    livestreamRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    livestreamWideRoadEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    livestreamDriverEncodeIdx: EncodeIndex | EncodeIndexBuilder | EncodeIndexReader
    livestreamRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    livestreamWideRoadEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    livestreamDriverEncodeData: EncodeData | EncodeDataBuilder | EncodeDataReader
    temperatureSensor2: SensorEventData | SensorEventDataBuilder | SensorEventDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> EventBuilder: ...
    def copy(self) -> EventBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> EventReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
